syntax = "proto3";
package canine_chain.amm;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "canine_chain/amm/params.proto";
import "canine_chain/amm/pool.proto";
import "canine_chain/amm/provider_record.proto";

option go_package = "github.com/jackalLabs/canine-chain/x/amm/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/amm/params";
  }
  // Queries a Pool by index.
	rpc Pool(QueryGetPoolRequest) returns (QueryGetPoolResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/pool/{pool_id}";
	}

	// Queries a list of Pool items.
	rpc PoolAll(QueryAllPoolRequest) returns (QueryAllPoolResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/pool";
	}

// Queries a ProviderRecord by pool name and provider address.
	rpc ProviderRecord(QueryGetProviderRecordRequest) returns (QueryGetProviderRecordResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/liq_provider_rec/{pool_id}/{provider}";
	}

// Estimate coin output from a swap.
	rpc EstimateSwapOut(QueryEstimateSwapOutRequest) returns (QueryEstimateSwapOutResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/estimate_swap_out/{pool_id}/{input_coin}";
	}

// Estimate coin input to get desired coin output from a swap.
	rpc EstimateSwapIn(QueryEstimateSwapInRequest) returns (QueryEstimateSwapInResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/estimate_swap_in/{pool_id}/{output_coins}";
	}

// Estimate coin inputs to get desired amount of pool token
	rpc EstimatePoolJoin(QueryEstimatePoolJoinRequest) returns (QueryEstimatePoolJoinResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/estimate_pool_join/{pool_id}";
	}

// Estimate the expected output coins when removing a certain amount from a liquidity pool.
	rpc EstimatePoolExit(QueryEstimatePoolExitRequest) returns (QueryEstimatePoolExitResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/estimate_pool_exit/{pool_id}/{amount}";
	}

// Queries a list of ListRecordsFromPool items.
	rpc ListRecordsFromPool(QueryListRecordsFromPoolRequest) returns (QueryListRecordsFromPoolResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/list_records_from_pool/{pool_id}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetPoolRequest {
	  uint64 pool_id = 1;
}

message QueryGetPoolResponse {
	Pool Pool = 1 [(gogoproto.nullable) = false];
}

message QueryAllPoolRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPoolResponse {
	repeated Pool Pool = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProviderRecordRequest {
  string provider = 1;
  uint64 pool_id = 2;
}

message QueryGetProviderRecordResponse {
	ProviderRecord ProviderRecord = 1 [(gogoproto.nullable) = false];
}

message QueryEstimateSwapOutRequest {
  uint64 pool_id = 1;
  string input_coin = 2;
}

message QueryEstimateSwapOutResponse {
  cosmos.base.v1beta1.Coin output_coin = 1 [(gogoproto.nullable) = false];
}

message QueryEstimateSwapInRequest {
  uint64 pool_id = 1;
  string output_coins = 2;
}

message QueryEstimateSwapInResponse {
  cosmos.base.v1beta1.Coin input_coins = 1 [(gogoproto.nullable) = false];
}

message QueryEstimatePoolJoinRequest {
  uint64 pool_id = 1;
  repeated cosmos.base.v1beta1.Coin liquidity = 2 [(gogoproto.nullable) = false];
}

message QueryEstimatePoolJoinResponse {
  cosmos.base.v1beta1.Coin share = 1 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin excess = 2 [(gogoproto.nullable) = false];
}

message QueryEstimatePoolExitRequest {
  uint64 pool_id = 1;
  uint64 amount = 2;
}

message QueryEstimatePoolExitResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1 [(gogoproto.nullable) = false];
}

message QueryListRecordsFromPoolRequest {
  uint64 pool_id = 1;
}

message QueryListRecordsFromPoolResponse {
	repeated ProviderRecord records = 1 [(gogoproto.nullable) = false];
}
