syntax = "proto3";
package canine_chain.amm;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "canine_chain/amm/params.proto";
import "canine_chain/amm/pool.proto";
import "canine_chain/amm/provider_record.proto";

option go_package = "github.com/jackalLabs/canine-chain/x/amm/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/amm/params";
  }
  // Queries a Pool by index.
	rpc Pool(QueryGetPoolRequest) returns (QueryGetPoolResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/pool/{index}";
	}

	// Queries a list of Pool items.
	rpc PoolAll(QueryAllPoolRequest) returns (QueryAllPoolResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/pool";
	}

// Queries a ProviderRecord by pool name and provider address.
	rpc ProviderRecord(QueryGetProviderRecordRequest) returns (QueryGetProviderRecordResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/liq_provider_rec/{poolName}/{provider}";
	}

// Estimate coin output from a swap.
	rpc EstimateSwapOut(QueryEstimateSwapOutRequest) returns (QueryEstimateSwapOutResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/estimate_out/{poolName}/{inputCoin}";
	}

// Estimate coin input to get desired coin output from a swap.
	rpc EstimateSwapIn(QueryEstimateSwapInRequest) returns (QueryEstimateSwapInResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/estimate_in/{poolName}/{outputCoins}";
	}

// Estimate coin inputs to get desired amount of LPToken.
	rpc EstimatePoolJoin(QueryEstimatePoolJoinRequest) returns (QueryEstimatePoolJoinResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/estimate_contribution/{poolName}/{desiredAmount}";
	}

// Query coins to deposit to make valid liquidity pair.
// Input one coin and get other coins to deposit to make liquidity pair.
	rpc MakeValidPair(QueryMakeValidPairRequest) returns (QueryMakeValidPairResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/make_pair/{poolName}/{coin}";
	}

// Estimate amount of coins returned by burning a pool token.
	rpc EstimateBurnShare(QueryEstimateBurnShareRequest) returns (QueryEstimateBurnShareResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/estimate_pool_remove/{amount}";
	}

// Queries a list of ListRecordsFromPool items.
	rpc ListRecordsFromPool(QueryListRecordsFromPoolRequest) returns (QueryListRecordsFromPoolResponse) {
		option (google.api.http).get = "/jackal-dao/canine-chain/amm/list_records_from_pool/{poolName}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetPoolRequest {
	  string index = 1;
}

message QueryGetPoolResponse {
	Pool Pool = 1 [(gogoproto.nullable) = false];
}

message QueryAllPoolRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPoolResponse {
	repeated Pool Pool = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProviderRecordRequest {
  string provider = 1;
  string poolName = 2;
}

message QueryGetProviderRecordResponse {
	ProviderRecord lProviderRecord = 1 [(gogoproto.nullable) = false];
}

message QueryEstimateSwapOutRequest {
  string poolName = 1;
  string inputCoin = 2;
}

message QueryEstimateSwapOutResponse {
  cosmos.base.v1beta1.Coin outputCoin = 1 [(gogoproto.nullable) = false];
}

message QueryEstimateSwapInRequest {
  string poolName = 1;
  string outputCoins = 2;
}

message QueryEstimateSwapInResponse {
  cosmos.base.v1beta1.Coin inputCoins = 1 [(gogoproto.nullable) = false];
}

// Estimate amount of coins to deposit to get desired amount of LPToken
message QueryEstimatePoolJoinRequest {
  string poolName = 1;
  string desiredAmount = 2;
}

message QueryEstimatePoolJoinResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1 [(gogoproto.nullable) = false];
}

// Query amount of coins to deposit to make a valid liquidity pair
message QueryMakeValidPairRequest {
  string poolName = 1;
  string coin = 2;
}

message QueryMakeValidPairResponse {
  cosmos.base.v1beta1.Coin coin = 1 [(gogoproto.nullable) = false];
}

// Estimate pool coins returned by burning LPToken
message QueryEstimateBurnShareRequest {
  string poolName = 1;
  string amount = 2;
}

message QueryEstimateBurnShareResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1[(gogoproto.nullable) = false];
}

message QueryListRecordsFromPoolRequest {
  string poolName = 1;
}

message QueryListRecordsFromPoolResponse {
	repeated ProviderRecord records = 1 [(gogoproto.nullable) = false];
}
