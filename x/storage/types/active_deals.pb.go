// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/storage/active_deals.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActiveDeals struct {
	Cid           string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Signee        string `protobuf:"bytes,2,opt,name=signee,proto3" json:"signee,omitempty"`
	Provider      string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Startblock    string `protobuf:"bytes,4,opt,name=startblock,proto3" json:"startblock,omitempty"`
	Endblock      string `protobuf:"bytes,5,opt,name=endblock,proto3" json:"endblock,omitempty"`
	Filesize      string `protobuf:"bytes,6,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Proofverified string `protobuf:"bytes,7,opt,name=proofverified,proto3" json:"proofverified,omitempty"`
	Proofsmissed  string `protobuf:"bytes,8,opt,name=proofsmissed,proto3" json:"proofsmissed,omitempty"`
	Blocktoprove  string `protobuf:"bytes,9,opt,name=blocktoprove,proto3" json:"blocktoprove,omitempty"`
	Creator       string `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
	Merkle        string `protobuf:"bytes,11,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Fid           string `protobuf:"bytes,12,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (m *ActiveDeals) Reset()         { *m = ActiveDeals{} }
func (m *ActiveDeals) String() string { return proto.CompactTextString(m) }
func (*ActiveDeals) ProtoMessage()    {}
func (*ActiveDeals) Descriptor() ([]byte, []int) {
	return fileDescriptor_71fa39f1fdaaaa6d, []int{0}
}
func (m *ActiveDeals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveDeals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveDeals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveDeals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveDeals.Merge(m, src)
}
func (m *ActiveDeals) XXX_Size() int {
	return m.Size()
}
func (m *ActiveDeals) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveDeals.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveDeals proto.InternalMessageInfo

func (m *ActiveDeals) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *ActiveDeals) GetSignee() string {
	if m != nil {
		return m.Signee
	}
	return ""
}

func (m *ActiveDeals) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ActiveDeals) GetStartblock() string {
	if m != nil {
		return m.Startblock
	}
	return ""
}

func (m *ActiveDeals) GetEndblock() string {
	if m != nil {
		return m.Endblock
	}
	return ""
}

func (m *ActiveDeals) GetFilesize() string {
	if m != nil {
		return m.Filesize
	}
	return ""
}

func (m *ActiveDeals) GetProofverified() string {
	if m != nil {
		return m.Proofverified
	}
	return ""
}

func (m *ActiveDeals) GetProofsmissed() string {
	if m != nil {
		return m.Proofsmissed
	}
	return ""
}

func (m *ActiveDeals) GetBlocktoprove() string {
	if m != nil {
		return m.Blocktoprove
	}
	return ""
}

func (m *ActiveDeals) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ActiveDeals) GetMerkle() string {
	if m != nil {
		return m.Merkle
	}
	return ""
}

func (m *ActiveDeals) GetFid() string {
	if m != nil {
		return m.Fid
	}
	return ""
}

func init() {
	proto.RegisterType((*ActiveDeals)(nil), "canine_chain.storage.ActiveDeals")
}

func init() {
	proto.RegisterFile("canine_chain/storage/active_deals.proto", fileDescriptor_71fa39f1fdaaaa6d)
}

var fileDescriptor_71fa39f1fdaaaa6d = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x18, 0xc4, 0xbb, 0xad, 0xf6, 0x4f, 0x5a, 0x41, 0x82, 0x48, 0xf0, 0x10, 0xa4, 0x08, 0x7a, 0xb1,
	0x0b, 0xfa, 0x04, 0x8a, 0xc7, 0x9e, 0x3c, 0x7a, 0x29, 0xd9, 0xe4, 0xdb, 0xf6, 0xb3, 0xdb, 0xcd,
	0x92, 0xc4, 0xa2, 0x3e, 0x85, 0x8f, 0xe5, 0xb1, 0x47, 0x2f, 0x82, 0xb4, 0x2f, 0x22, 0x49, 0xda,
	0xb2, 0xbd, 0xed, 0xcc, 0xfc, 0x3e, 0x36, 0xcc, 0x90, 0x6b, 0x29, 0x4a, 0x2c, 0x61, 0x22, 0x67,
	0x02, 0xcb, 0xd4, 0x3a, 0x6d, 0xc4, 0x14, 0x52, 0x21, 0x1d, 0x2e, 0x61, 0xa2, 0x40, 0x14, 0x76,
	0x54, 0x19, 0xed, 0x34, 0x3d, 0xab, 0x83, 0xa3, 0x2d, 0x38, 0xfc, 0x6d, 0x92, 0xfe, 0x43, 0x80,
	0x9f, 0x3c, 0x4b, 0x4f, 0x49, 0x4b, 0xa2, 0x62, 0xc9, 0x65, 0x72, 0xd3, 0x7b, 0xf6, 0x9f, 0xf4,
	0x9c, 0xb4, 0x2d, 0x4e, 0x4b, 0x00, 0xd6, 0x0c, 0xe6, 0x56, 0xd1, 0x0b, 0xd2, 0xad, 0x8c, 0x5e,
	0xa2, 0x02, 0xc3, 0x5a, 0x21, 0xd9, 0x6b, 0xca, 0x09, 0xb1, 0x4e, 0x18, 0x97, 0x15, 0x5a, 0xce,
	0xd9, 0x51, 0x48, 0x6b, 0x8e, 0xbf, 0x85, 0x52, 0xc5, 0xf4, 0x38, 0xde, 0xee, 0xb4, 0xcf, 0x72,
	0x2c, 0xc0, 0xe2, 0x27, 0xb0, 0x76, 0xcc, 0x76, 0x9a, 0x5e, 0x91, 0x93, 0xca, 0x68, 0x9d, 0x2f,
	0xc1, 0x60, 0x8e, 0xa0, 0x58, 0x27, 0x00, 0x87, 0x26, 0x1d, 0x92, 0x41, 0x30, 0xec, 0x02, 0xad,
	0x05, 0xc5, 0xba, 0x01, 0x3a, 0xf0, 0x3c, 0x13, 0x7e, 0xe7, 0xb4, 0x7f, 0x34, 0xb0, 0x5e, 0x64,
	0xea, 0x1e, 0x65, 0xa4, 0x23, 0x0d, 0x08, 0xa7, 0x0d, 0x23, 0x21, 0xde, 0x49, 0xdf, 0xc9, 0x02,
	0xcc, 0xbc, 0x00, 0xd6, 0x8f, 0x9d, 0x44, 0xe5, 0xdb, 0xcb, 0x51, 0xb1, 0x41, 0x6c, 0x2f, 0x47,
	0xf5, 0x38, 0xfe, 0x5e, 0xf3, 0x64, 0xb5, 0xe6, 0xc9, 0xdf, 0x9a, 0x27, 0x5f, 0x1b, 0xde, 0x58,
	0x6d, 0x78, 0xe3, 0x67, 0xc3, 0x1b, 0x2f, 0x77, 0x53, 0x74, 0xb3, 0xb7, 0x6c, 0x24, 0xf5, 0x22,
	0x7d, 0x15, 0x72, 0x2e, 0x8a, 0xb1, 0xc8, 0x6c, 0x1a, 0x57, 0xba, 0x8d, 0x73, 0xbe, 0xef, 0x07,
	0x75, 0x1f, 0x15, 0xd8, 0xac, 0x1d, 0xa6, 0xbc, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x74,
	0x98, 0x75, 0xf5, 0x01, 0x00, 0x00,
}

func (m *ActiveDeals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveDeals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveDeals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Blocktoprove) > 0 {
		i -= len(m.Blocktoprove)
		copy(dAtA[i:], m.Blocktoprove)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Blocktoprove)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Proofsmissed) > 0 {
		i -= len(m.Proofsmissed)
		copy(dAtA[i:], m.Proofsmissed)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Proofsmissed)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Proofverified) > 0 {
		i -= len(m.Proofverified)
		copy(dAtA[i:], m.Proofverified)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Proofverified)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Filesize) > 0 {
		i -= len(m.Filesize)
		copy(dAtA[i:], m.Filesize)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Filesize)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Endblock) > 0 {
		i -= len(m.Endblock)
		copy(dAtA[i:], m.Endblock)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Endblock)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Startblock) > 0 {
		i -= len(m.Startblock)
		copy(dAtA[i:], m.Startblock)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Startblock)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signee) > 0 {
		i -= len(m.Signee)
		copy(dAtA[i:], m.Signee)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Signee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintActiveDeals(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActiveDeals(dAtA []byte, offset int, v uint64) int {
	offset -= sovActiveDeals(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActiveDeals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Signee)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Startblock)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Endblock)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Filesize)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Proofverified)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Proofsmissed)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Blocktoprove)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovActiveDeals(uint64(l))
	}
	return n
}

func sovActiveDeals(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActiveDeals(x uint64) (n int) {
	return sovActiveDeals(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActiveDeals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveDeals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveDeals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveDeals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Startblock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Startblock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endblock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endblock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filesize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofverified", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofverified = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofsmissed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofsmissed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocktoprove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocktoprove = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveDeals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveDeals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActiveDeals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActiveDeals(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActiveDeals
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveDeals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActiveDeals
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActiveDeals
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActiveDeals
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActiveDeals        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActiveDeals          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActiveDeals = fmt.Errorf("proto: unexpected end of group")
)
