// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/storage/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParams is request type for the Query/Params RPC method.
type QueryParams struct {
}

func (m *QueryParams) Reset()         { *m = QueryParams{} }
func (m *QueryParams) String() string { return proto.CompactTextString(m) }
func (*QueryParams) ProtoMessage()    {}
func (*QueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{0}
}
func (m *QueryParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParams.Merge(m, src)
}
func (m *QueryParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParams proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryProof struct {
	ProviderAddress string `protobuf:"bytes,1,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	Merkle          []byte `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner           string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Start           int64  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *QueryProof) Reset()         { *m = QueryProof{} }
func (m *QueryProof) String() string { return proto.CompactTextString(m) }
func (*QueryProof) ProtoMessage()    {}
func (*QueryProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{2}
}
func (m *QueryProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProof.Merge(m, src)
}
func (m *QueryProof) XXX_Size() int {
	return m.Size()
}
func (m *QueryProof) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProof.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProof proto.InternalMessageInfo

func (m *QueryProof) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *QueryProof) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *QueryProof) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryProof) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type QueryProofResponse struct {
	Proof FileProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof"`
}

func (m *QueryProofResponse) Reset()         { *m = QueryProofResponse{} }
func (m *QueryProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProofResponse) ProtoMessage()    {}
func (*QueryProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{3}
}
func (m *QueryProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofResponse.Merge(m, src)
}
func (m *QueryProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofResponse proto.InternalMessageInfo

func (m *QueryProofResponse) GetProof() FileProof {
	if m != nil {
		return m.Proof
	}
	return FileProof{}
}

type QueryProofsByAddress struct {
	ProviderAddress string             `protobuf:"bytes,1,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProofsByAddress) Reset()         { *m = QueryProofsByAddress{} }
func (m *QueryProofsByAddress) String() string { return proto.CompactTextString(m) }
func (*QueryProofsByAddress) ProtoMessage()    {}
func (*QueryProofsByAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{4}
}
func (m *QueryProofsByAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofsByAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofsByAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofsByAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofsByAddress.Merge(m, src)
}
func (m *QueryProofsByAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofsByAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofsByAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofsByAddress proto.InternalMessageInfo

func (m *QueryProofsByAddress) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *QueryProofsByAddress) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryProofsByAddressResponse struct {
	Proofs     []FileProof         `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProofsByAddressResponse) Reset()         { *m = QueryProofsByAddressResponse{} }
func (m *QueryProofsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProofsByAddressResponse) ProtoMessage()    {}
func (*QueryProofsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{5}
}
func (m *QueryProofsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofsByAddressResponse.Merge(m, src)
}
func (m *QueryProofsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofsByAddressResponse proto.InternalMessageInfo

func (m *QueryProofsByAddressResponse) GetProofs() []FileProof {
	if m != nil {
		return m.Proofs
	}
	return nil
}

func (m *QueryProofsByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProofs struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProofs) Reset()         { *m = QueryAllProofs{} }
func (m *QueryAllProofs) String() string { return proto.CompactTextString(m) }
func (*QueryAllProofs) ProtoMessage()    {}
func (*QueryAllProofs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{6}
}
func (m *QueryAllProofs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProofs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProofs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProofs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProofs.Merge(m, src)
}
func (m *QueryAllProofs) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProofs) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProofs.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProofs proto.InternalMessageInfo

func (m *QueryAllProofs) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProofsResponse struct {
	Proofs     []FileProof         `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProofsResponse) Reset()         { *m = QueryAllProofsResponse{} }
func (m *QueryAllProofsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProofsResponse) ProtoMessage()    {}
func (*QueryAllProofsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{7}
}
func (m *QueryAllProofsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProofsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProofsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProofsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProofsResponse.Merge(m, src)
}
func (m *QueryAllProofsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProofsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProofsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProofsResponse proto.InternalMessageInfo

func (m *QueryAllProofsResponse) GetProofs() []FileProof {
	if m != nil {
		return m.Proofs
	}
	return nil
}

func (m *QueryAllProofsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFile struct {
	Merkle []byte `protobuf:"bytes,1,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner  string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Start  int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *QueryFile) Reset()         { *m = QueryFile{} }
func (m *QueryFile) String() string { return proto.CompactTextString(m) }
func (*QueryFile) ProtoMessage()    {}
func (*QueryFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{8}
}
func (m *QueryFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFile.Merge(m, src)
}
func (m *QueryFile) XXX_Size() int {
	return m.Size()
}
func (m *QueryFile) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFile.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFile proto.InternalMessageInfo

func (m *QueryFile) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *QueryFile) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryFile) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type QueryFileResponse struct {
	File UnifiedFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file"`
}

func (m *QueryFileResponse) Reset()         { *m = QueryFileResponse{} }
func (m *QueryFileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFileResponse) ProtoMessage()    {}
func (*QueryFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{9}
}
func (m *QueryFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFileResponse.Merge(m, src)
}
func (m *QueryFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFileResponse proto.InternalMessageInfo

func (m *QueryFileResponse) GetFile() UnifiedFile {
	if m != nil {
		return m.File
	}
	return UnifiedFile{}
}

type QueryAllFiles struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFiles) Reset()         { *m = QueryAllFiles{} }
func (m *QueryAllFiles) String() string { return proto.CompactTextString(m) }
func (*QueryAllFiles) ProtoMessage()    {}
func (*QueryAllFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{10}
}
func (m *QueryAllFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFiles.Merge(m, src)
}
func (m *QueryAllFiles) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFiles.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFiles proto.InternalMessageInfo

func (m *QueryAllFiles) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOpenFiles struct {
	ProviderAddress string             `protobuf:"bytes,1,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOpenFiles) Reset()         { *m = QueryOpenFiles{} }
func (m *QueryOpenFiles) String() string { return proto.CompactTextString(m) }
func (*QueryOpenFiles) ProtoMessage()    {}
func (*QueryOpenFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{11}
}
func (m *QueryOpenFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOpenFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOpenFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOpenFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOpenFiles.Merge(m, src)
}
func (m *QueryOpenFiles) XXX_Size() int {
	return m.Size()
}
func (m *QueryOpenFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOpenFiles.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOpenFiles proto.InternalMessageInfo

func (m *QueryOpenFiles) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *QueryOpenFiles) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFilesResponse struct {
	Files      []UnifiedFile       `protobuf:"bytes,1,rep,name=files,proto3" json:"files"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFilesResponse) Reset()         { *m = QueryAllFilesResponse{} }
func (m *QueryAllFilesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFilesResponse) ProtoMessage()    {}
func (*QueryAllFilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{12}
}
func (m *QueryAllFilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFilesResponse.Merge(m, src)
}
func (m *QueryAllFilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFilesResponse proto.InternalMessageInfo

func (m *QueryAllFilesResponse) GetFiles() []UnifiedFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *QueryAllFilesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryProvider struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryProvider) Reset()         { *m = QueryProvider{} }
func (m *QueryProvider) String() string { return proto.CompactTextString(m) }
func (*QueryProvider) ProtoMessage()    {}
func (*QueryProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{13}
}
func (m *QueryProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvider.Merge(m, src)
}
func (m *QueryProvider) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvider.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvider proto.InternalMessageInfo

func (m *QueryProvider) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryProviderResponse struct {
	Provider Providers `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider"`
}

func (m *QueryProviderResponse) Reset()         { *m = QueryProviderResponse{} }
func (m *QueryProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProviderResponse) ProtoMessage()    {}
func (*QueryProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{14}
}
func (m *QueryProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderResponse.Merge(m, src)
}
func (m *QueryProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderResponse proto.InternalMessageInfo

func (m *QueryProviderResponse) GetProvider() Providers {
	if m != nil {
		return m.Provider
	}
	return Providers{}
}

type QueryAllProviders struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProviders) Reset()         { *m = QueryAllProviders{} }
func (m *QueryAllProviders) String() string { return proto.CompactTextString(m) }
func (*QueryAllProviders) ProtoMessage()    {}
func (*QueryAllProviders) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{15}
}
func (m *QueryAllProviders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProviders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProviders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProviders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProviders.Merge(m, src)
}
func (m *QueryAllProviders) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProviders) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProviders.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProviders proto.InternalMessageInfo

func (m *QueryAllProviders) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProvidersResponse struct {
	Providers  []Providers         `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProvidersResponse) Reset()         { *m = QueryAllProvidersResponse{} }
func (m *QueryAllProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProvidersResponse) ProtoMessage()    {}
func (*QueryAllProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{16}
}
func (m *QueryAllProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProvidersResponse.Merge(m, src)
}
func (m *QueryAllProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProvidersResponse proto.InternalMessageInfo

func (m *QueryAllProvidersResponse) GetProviders() []Providers {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *QueryAllProvidersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAttestation struct {
	Prover string `protobuf:"bytes,1,opt,name=prover,proto3" json:"prover,omitempty"`
	Merkle []byte `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner  string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Start  int64  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *QueryAttestation) Reset()         { *m = QueryAttestation{} }
func (m *QueryAttestation) String() string { return proto.CompactTextString(m) }
func (*QueryAttestation) ProtoMessage()    {}
func (*QueryAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{17}
}
func (m *QueryAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestation.Merge(m, src)
}
func (m *QueryAttestation) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestation proto.InternalMessageInfo

func (m *QueryAttestation) GetProver() string {
	if m != nil {
		return m.Prover
	}
	return ""
}

func (m *QueryAttestation) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *QueryAttestation) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryAttestation) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type QueryAttestationResponse struct {
	Attestation AttestationForm `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation"`
}

func (m *QueryAttestationResponse) Reset()         { *m = QueryAttestationResponse{} }
func (m *QueryAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationResponse) ProtoMessage()    {}
func (*QueryAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{18}
}
func (m *QueryAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationResponse.Merge(m, src)
}
func (m *QueryAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationResponse proto.InternalMessageInfo

func (m *QueryAttestationResponse) GetAttestation() AttestationForm {
	if m != nil {
		return m.Attestation
	}
	return AttestationForm{}
}

type QueryAllAttestations struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestations) Reset()         { *m = QueryAllAttestations{} }
func (m *QueryAllAttestations) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestations) ProtoMessage()    {}
func (*QueryAllAttestations) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{19}
}
func (m *QueryAllAttestations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestations.Merge(m, src)
}
func (m *QueryAllAttestations) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestations) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestations.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestations proto.InternalMessageInfo

func (m *QueryAllAttestations) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAttestationsResponse struct {
	Attestations []AttestationForm   `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestationsResponse) Reset()         { *m = QueryAllAttestationsResponse{} }
func (m *QueryAllAttestationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestationsResponse) ProtoMessage()    {}
func (*QueryAllAttestationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{20}
}
func (m *QueryAllAttestationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestationsResponse.Merge(m, src)
}
func (m *QueryAllAttestationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestationsResponse proto.InternalMessageInfo

func (m *QueryAllAttestationsResponse) GetAttestations() []AttestationForm {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *QueryAllAttestationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryReport struct {
	Prover string `protobuf:"bytes,1,opt,name=prover,proto3" json:"prover,omitempty"`
	Merkle []byte `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner  string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Start  int64  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *QueryReport) Reset()         { *m = QueryReport{} }
func (m *QueryReport) String() string { return proto.CompactTextString(m) }
func (*QueryReport) ProtoMessage()    {}
func (*QueryReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{21}
}
func (m *QueryReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReport.Merge(m, src)
}
func (m *QueryReport) XXX_Size() int {
	return m.Size()
}
func (m *QueryReport) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReport.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReport proto.InternalMessageInfo

func (m *QueryReport) GetProver() string {
	if m != nil {
		return m.Prover
	}
	return ""
}

func (m *QueryReport) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *QueryReport) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryReport) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type QueryReportResponse struct {
	Report ReportForm `protobuf:"bytes,1,opt,name=report,proto3" json:"report"`
}

func (m *QueryReportResponse) Reset()         { *m = QueryReportResponse{} }
func (m *QueryReportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReportResponse) ProtoMessage()    {}
func (*QueryReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{22}
}
func (m *QueryReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportResponse.Merge(m, src)
}
func (m *QueryReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportResponse proto.InternalMessageInfo

func (m *QueryReportResponse) GetReport() ReportForm {
	if m != nil {
		return m.Report
	}
	return ReportForm{}
}

type QueryAllReports struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReports) Reset()         { *m = QueryAllReports{} }
func (m *QueryAllReports) String() string { return proto.CompactTextString(m) }
func (*QueryAllReports) ProtoMessage()    {}
func (*QueryAllReports) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{23}
}
func (m *QueryAllReports) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReports) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReports.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReports) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReports.Merge(m, src)
}
func (m *QueryAllReports) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReports) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReports.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReports proto.InternalMessageInfo

func (m *QueryAllReports) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReportsResponse struct {
	Reports    []ReportForm        `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReportsResponse) Reset()         { *m = QueryAllReportsResponse{} }
func (m *QueryAllReportsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReportsResponse) ProtoMessage()    {}
func (*QueryAllReportsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{24}
}
func (m *QueryAllReportsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReportsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReportsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReportsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReportsResponse.Merge(m, src)
}
func (m *QueryAllReportsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReportsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReportsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReportsResponse proto.InternalMessageInfo

func (m *QueryAllReportsResponse) GetReports() []ReportForm {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *QueryAllReportsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFreeSpace struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryFreeSpace) Reset()         { *m = QueryFreeSpace{} }
func (m *QueryFreeSpace) String() string { return proto.CompactTextString(m) }
func (*QueryFreeSpace) ProtoMessage()    {}
func (*QueryFreeSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{25}
}
func (m *QueryFreeSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFreeSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFreeSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFreeSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFreeSpace.Merge(m, src)
}
func (m *QueryFreeSpace) XXX_Size() int {
	return m.Size()
}
func (m *QueryFreeSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFreeSpace.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFreeSpace proto.InternalMessageInfo

func (m *QueryFreeSpace) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryStoreCount struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryStoreCount) Reset()         { *m = QueryStoreCount{} }
func (m *QueryStoreCount) String() string { return proto.CompactTextString(m) }
func (*QueryStoreCount) ProtoMessage()    {}
func (*QueryStoreCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{26}
}
func (m *QueryStoreCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoreCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoreCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoreCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoreCount.Merge(m, src)
}
func (m *QueryStoreCount) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoreCount) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoreCount.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoreCount proto.InternalMessageInfo

func (m *QueryStoreCount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryFreeSpaceResponse struct {
	Space int64 `protobuf:"varint,1,opt,name=space,proto3" json:"space,omitempty"`
}

func (m *QueryFreeSpaceResponse) Reset()         { *m = QueryFreeSpaceResponse{} }
func (m *QueryFreeSpaceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFreeSpaceResponse) ProtoMessage()    {}
func (*QueryFreeSpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{27}
}
func (m *QueryFreeSpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFreeSpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFreeSpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFreeSpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFreeSpaceResponse.Merge(m, src)
}
func (m *QueryFreeSpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFreeSpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFreeSpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFreeSpaceResponse proto.InternalMessageInfo

func (m *QueryFreeSpaceResponse) GetSpace() int64 {
	if m != nil {
		return m.Space
	}
	return 0
}

type QueryStoreCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryStoreCountResponse) Reset()         { *m = QueryStoreCountResponse{} }
func (m *QueryStoreCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStoreCountResponse) ProtoMessage()    {}
func (*QueryStoreCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{28}
}
func (m *QueryStoreCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoreCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoreCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoreCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoreCountResponse.Merge(m, src)
}
func (m *QueryStoreCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoreCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoreCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoreCountResponse proto.InternalMessageInfo

func (m *QueryStoreCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryFindFile struct {
	Merkle []byte `protobuf:"bytes,1,opt,name=merkle,proto3" json:"merkle,omitempty"`
}

func (m *QueryFindFile) Reset()         { *m = QueryFindFile{} }
func (m *QueryFindFile) String() string { return proto.CompactTextString(m) }
func (*QueryFindFile) ProtoMessage()    {}
func (*QueryFindFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{29}
}
func (m *QueryFindFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindFile.Merge(m, src)
}
func (m *QueryFindFile) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindFile) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindFile.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindFile proto.InternalMessageInfo

func (m *QueryFindFile) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

type QueryFindFileResponse struct {
	ProviderIps string `protobuf:"bytes,1,opt,name=provider_ips,json=providerIps,proto3" json:"provider_ips,omitempty"`
}

func (m *QueryFindFileResponse) Reset()         { *m = QueryFindFileResponse{} }
func (m *QueryFindFileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFindFileResponse) ProtoMessage()    {}
func (*QueryFindFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{30}
}
func (m *QueryFindFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindFileResponse.Merge(m, src)
}
func (m *QueryFindFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindFileResponse proto.InternalMessageInfo

func (m *QueryFindFileResponse) GetProviderIps() string {
	if m != nil {
		return m.ProviderIps
	}
	return ""
}

type QueryClientFreeSpace struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryClientFreeSpace) Reset()         { *m = QueryClientFreeSpace{} }
func (m *QueryClientFreeSpace) String() string { return proto.CompactTextString(m) }
func (*QueryClientFreeSpace) ProtoMessage()    {}
func (*QueryClientFreeSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{31}
}
func (m *QueryClientFreeSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientFreeSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientFreeSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientFreeSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientFreeSpace.Merge(m, src)
}
func (m *QueryClientFreeSpace) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientFreeSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientFreeSpace.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientFreeSpace proto.InternalMessageInfo

func (m *QueryClientFreeSpace) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryClientFreeSpaceResponse struct {
	BytesFree int64 `protobuf:"varint,1,opt,name=bytes_free,json=bytesFree,proto3" json:"bytes_free,omitempty"`
}

func (m *QueryClientFreeSpaceResponse) Reset()         { *m = QueryClientFreeSpaceResponse{} }
func (m *QueryClientFreeSpaceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClientFreeSpaceResponse) ProtoMessage()    {}
func (*QueryClientFreeSpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{32}
}
func (m *QueryClientFreeSpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientFreeSpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientFreeSpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientFreeSpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientFreeSpaceResponse.Merge(m, src)
}
func (m *QueryClientFreeSpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientFreeSpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientFreeSpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientFreeSpaceResponse proto.InternalMessageInfo

func (m *QueryClientFreeSpaceResponse) GetBytesFree() int64 {
	if m != nil {
		return m.BytesFree
	}
	return 0
}

type QueryPayData struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPayData) Reset()         { *m = QueryPayData{} }
func (m *QueryPayData) String() string { return proto.CompactTextString(m) }
func (*QueryPayData) ProtoMessage()    {}
func (*QueryPayData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{33}
}
func (m *QueryPayData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPayData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPayData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPayData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPayData.Merge(m, src)
}
func (m *QueryPayData) XXX_Size() int {
	return m.Size()
}
func (m *QueryPayData) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPayData.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPayData proto.InternalMessageInfo

func (m *QueryPayData) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryPayDataResponse struct {
	TimeRemaining int64 `protobuf:"varint,1,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	Bytes         int64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *QueryPayDataResponse) Reset()         { *m = QueryPayDataResponse{} }
func (m *QueryPayDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPayDataResponse) ProtoMessage()    {}
func (*QueryPayDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{34}
}
func (m *QueryPayDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPayDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPayDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPayDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPayDataResponse.Merge(m, src)
}
func (m *QueryPayDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPayDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPayDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPayDataResponse proto.InternalMessageInfo

func (m *QueryPayDataResponse) GetTimeRemaining() int64 {
	if m != nil {
		return m.TimeRemaining
	}
	return 0
}

func (m *QueryPayDataResponse) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type QueryStoragePaymentInfo struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryStoragePaymentInfo) Reset()         { *m = QueryStoragePaymentInfo{} }
func (m *QueryStoragePaymentInfo) String() string { return proto.CompactTextString(m) }
func (*QueryStoragePaymentInfo) ProtoMessage()    {}
func (*QueryStoragePaymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{35}
}
func (m *QueryStoragePaymentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoragePaymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoragePaymentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoragePaymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoragePaymentInfo.Merge(m, src)
}
func (m *QueryStoragePaymentInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoragePaymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoragePaymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoragePaymentInfo proto.InternalMessageInfo

func (m *QueryStoragePaymentInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryStoragePaymentInfoResponse struct {
	StoragePaymentInfo StoragePaymentInfo `protobuf:"bytes,1,opt,name=storage_payment_info,json=storagePaymentInfo,proto3" json:"storage_payment_info"`
}

func (m *QueryStoragePaymentInfoResponse) Reset()         { *m = QueryStoragePaymentInfoResponse{} }
func (m *QueryStoragePaymentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStoragePaymentInfoResponse) ProtoMessage()    {}
func (*QueryStoragePaymentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{36}
}
func (m *QueryStoragePaymentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoragePaymentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoragePaymentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoragePaymentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoragePaymentInfoResponse.Merge(m, src)
}
func (m *QueryStoragePaymentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoragePaymentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoragePaymentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoragePaymentInfoResponse proto.InternalMessageInfo

func (m *QueryStoragePaymentInfoResponse) GetStoragePaymentInfo() StoragePaymentInfo {
	if m != nil {
		return m.StoragePaymentInfo
	}
	return StoragePaymentInfo{}
}

type QueryAllStoragePaymentInfo struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoragePaymentInfo) Reset()         { *m = QueryAllStoragePaymentInfo{} }
func (m *QueryAllStoragePaymentInfo) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoragePaymentInfo) ProtoMessage()    {}
func (*QueryAllStoragePaymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{37}
}
func (m *QueryAllStoragePaymentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoragePaymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoragePaymentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoragePaymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoragePaymentInfo.Merge(m, src)
}
func (m *QueryAllStoragePaymentInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoragePaymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoragePaymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoragePaymentInfo proto.InternalMessageInfo

func (m *QueryAllStoragePaymentInfo) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoragePaymentInfoResponse struct {
	StoragePaymentInfo []StoragePaymentInfo `protobuf:"bytes,1,rep,name=storage_payment_info,json=storagePaymentInfo,proto3" json:"storage_payment_info"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoragePaymentInfoResponse) Reset()         { *m = QueryAllStoragePaymentInfoResponse{} }
func (m *QueryAllStoragePaymentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoragePaymentInfoResponse) ProtoMessage()    {}
func (*QueryAllStoragePaymentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{38}
}
func (m *QueryAllStoragePaymentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoragePaymentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoragePaymentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoragePaymentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoragePaymentInfoResponse.Merge(m, src)
}
func (m *QueryAllStoragePaymentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoragePaymentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoragePaymentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoragePaymentInfoResponse proto.InternalMessageInfo

func (m *QueryAllStoragePaymentInfoResponse) GetStoragePaymentInfo() []StoragePaymentInfo {
	if m != nil {
		return m.StoragePaymentInfo
	}
	return nil
}

func (m *QueryAllStoragePaymentInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFileUploadCheck struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Bytes   int64  `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *QueryFileUploadCheck) Reset()         { *m = QueryFileUploadCheck{} }
func (m *QueryFileUploadCheck) String() string { return proto.CompactTextString(m) }
func (*QueryFileUploadCheck) ProtoMessage()    {}
func (*QueryFileUploadCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{39}
}
func (m *QueryFileUploadCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFileUploadCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFileUploadCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFileUploadCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFileUploadCheck.Merge(m, src)
}
func (m *QueryFileUploadCheck) XXX_Size() int {
	return m.Size()
}
func (m *QueryFileUploadCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFileUploadCheck.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFileUploadCheck proto.InternalMessageInfo

func (m *QueryFileUploadCheck) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryFileUploadCheck) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type QueryFileUploadCheckResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *QueryFileUploadCheckResponse) Reset()         { *m = QueryFileUploadCheckResponse{} }
func (m *QueryFileUploadCheckResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFileUploadCheckResponse) ProtoMessage()    {}
func (*QueryFileUploadCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{40}
}
func (m *QueryFileUploadCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFileUploadCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFileUploadCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFileUploadCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFileUploadCheckResponse.Merge(m, src)
}
func (m *QueryFileUploadCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFileUploadCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFileUploadCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFileUploadCheckResponse proto.InternalMessageInfo

func (m *QueryFileUploadCheckResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type QueryPriceCheck struct {
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Bytes    int64  `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *QueryPriceCheck) Reset()         { *m = QueryPriceCheck{} }
func (m *QueryPriceCheck) String() string { return proto.CompactTextString(m) }
func (*QueryPriceCheck) ProtoMessage()    {}
func (*QueryPriceCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{41}
}
func (m *QueryPriceCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceCheck.Merge(m, src)
}
func (m *QueryPriceCheck) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceCheck.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceCheck proto.InternalMessageInfo

func (m *QueryPriceCheck) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *QueryPriceCheck) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type QueryPriceCheckResponse struct {
	Price int64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *QueryPriceCheckResponse) Reset()         { *m = QueryPriceCheckResponse{} }
func (m *QueryPriceCheckResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPriceCheckResponse) ProtoMessage()    {}
func (*QueryPriceCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{42}
}
func (m *QueryPriceCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceCheckResponse.Merge(m, src)
}
func (m *QueryPriceCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceCheckResponse proto.InternalMessageInfo

func (m *QueryPriceCheckResponse) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type QueryActiveProviders struct {
}

func (m *QueryActiveProviders) Reset()         { *m = QueryActiveProviders{} }
func (m *QueryActiveProviders) String() string { return proto.CompactTextString(m) }
func (*QueryActiveProviders) ProtoMessage()    {}
func (*QueryActiveProviders) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{43}
}
func (m *QueryActiveProviders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveProviders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveProviders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveProviders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveProviders.Merge(m, src)
}
func (m *QueryActiveProviders) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveProviders) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveProviders.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveProviders proto.InternalMessageInfo

type QueryActiveProvidersResponse struct {
	Providers []ActiveProviders `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers"`
}

func (m *QueryActiveProvidersResponse) Reset()         { *m = QueryActiveProvidersResponse{} }
func (m *QueryActiveProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveProvidersResponse) ProtoMessage()    {}
func (*QueryActiveProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{44}
}
func (m *QueryActiveProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveProvidersResponse.Merge(m, src)
}
func (m *QueryActiveProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveProvidersResponse proto.InternalMessageInfo

func (m *QueryActiveProvidersResponse) GetProviders() []ActiveProviders {
	if m != nil {
		return m.Providers
	}
	return nil
}

type QueryStorageStats struct {
}

func (m *QueryStorageStats) Reset()         { *m = QueryStorageStats{} }
func (m *QueryStorageStats) String() string { return proto.CompactTextString(m) }
func (*QueryStorageStats) ProtoMessage()    {}
func (*QueryStorageStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{45}
}
func (m *QueryStorageStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStorageStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStorageStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStorageStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStorageStats.Merge(m, src)
}
func (m *QueryStorageStats) XXX_Size() int {
	return m.Size()
}
func (m *QueryStorageStats) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStorageStats.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStorageStats proto.InternalMessageInfo

type QueryStorageStatsResponse struct {
	Purchased   uint64                                 `protobuf:"varint,1,opt,name=purchased,proto3" json:"purchased,omitempty"`
	Used        uint64                                 `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
	UsedRatio   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=used_ratio,json=usedRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"used_ratio"`
	ActiveUsers uint64                                 `protobuf:"varint,4,opt,name=active_users,json=activeUsers,proto3" json:"active_users,omitempty"`
	UsersByPlan map[int64]int64                        `protobuf:"bytes,5,rep,name=users_by_plan,json=usersByPlan,proto3" json:"users_by_plan,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *QueryStorageStatsResponse) Reset()         { *m = QueryStorageStatsResponse{} }
func (m *QueryStorageStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStorageStatsResponse) ProtoMessage()    {}
func (*QueryStorageStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fe03bff51a37284, []int{46}
}
func (m *QueryStorageStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStorageStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStorageStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStorageStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStorageStatsResponse.Merge(m, src)
}
func (m *QueryStorageStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStorageStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStorageStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStorageStatsResponse proto.InternalMessageInfo

func (m *QueryStorageStatsResponse) GetPurchased() uint64 {
	if m != nil {
		return m.Purchased
	}
	return 0
}

func (m *QueryStorageStatsResponse) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *QueryStorageStatsResponse) GetActiveUsers() uint64 {
	if m != nil {
		return m.ActiveUsers
	}
	return 0
}

func (m *QueryStorageStatsResponse) GetUsersByPlan() map[int64]int64 {
	if m != nil {
		return m.UsersByPlan
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParams)(nil), "canine_chain.storage.QueryParams")
	proto.RegisterType((*QueryParamsResponse)(nil), "canine_chain.storage.QueryParamsResponse")
	proto.RegisterType((*QueryProof)(nil), "canine_chain.storage.QueryProof")
	proto.RegisterType((*QueryProofResponse)(nil), "canine_chain.storage.QueryProofResponse")
	proto.RegisterType((*QueryProofsByAddress)(nil), "canine_chain.storage.QueryProofsByAddress")
	proto.RegisterType((*QueryProofsByAddressResponse)(nil), "canine_chain.storage.QueryProofsByAddressResponse")
	proto.RegisterType((*QueryAllProofs)(nil), "canine_chain.storage.QueryAllProofs")
	proto.RegisterType((*QueryAllProofsResponse)(nil), "canine_chain.storage.QueryAllProofsResponse")
	proto.RegisterType((*QueryFile)(nil), "canine_chain.storage.QueryFile")
	proto.RegisterType((*QueryFileResponse)(nil), "canine_chain.storage.QueryFileResponse")
	proto.RegisterType((*QueryAllFiles)(nil), "canine_chain.storage.QueryAllFiles")
	proto.RegisterType((*QueryOpenFiles)(nil), "canine_chain.storage.QueryOpenFiles")
	proto.RegisterType((*QueryAllFilesResponse)(nil), "canine_chain.storage.QueryAllFilesResponse")
	proto.RegisterType((*QueryProvider)(nil), "canine_chain.storage.QueryProvider")
	proto.RegisterType((*QueryProviderResponse)(nil), "canine_chain.storage.QueryProviderResponse")
	proto.RegisterType((*QueryAllProviders)(nil), "canine_chain.storage.QueryAllProviders")
	proto.RegisterType((*QueryAllProvidersResponse)(nil), "canine_chain.storage.QueryAllProvidersResponse")
	proto.RegisterType((*QueryAttestation)(nil), "canine_chain.storage.QueryAttestation")
	proto.RegisterType((*QueryAttestationResponse)(nil), "canine_chain.storage.QueryAttestationResponse")
	proto.RegisterType((*QueryAllAttestations)(nil), "canine_chain.storage.QueryAllAttestations")
	proto.RegisterType((*QueryAllAttestationsResponse)(nil), "canine_chain.storage.QueryAllAttestationsResponse")
	proto.RegisterType((*QueryReport)(nil), "canine_chain.storage.QueryReport")
	proto.RegisterType((*QueryReportResponse)(nil), "canine_chain.storage.QueryReportResponse")
	proto.RegisterType((*QueryAllReports)(nil), "canine_chain.storage.QueryAllReports")
	proto.RegisterType((*QueryAllReportsResponse)(nil), "canine_chain.storage.QueryAllReportsResponse")
	proto.RegisterType((*QueryFreeSpace)(nil), "canine_chain.storage.QueryFreeSpace")
	proto.RegisterType((*QueryStoreCount)(nil), "canine_chain.storage.QueryStoreCount")
	proto.RegisterType((*QueryFreeSpaceResponse)(nil), "canine_chain.storage.QueryFreeSpaceResponse")
	proto.RegisterType((*QueryStoreCountResponse)(nil), "canine_chain.storage.QueryStoreCountResponse")
	proto.RegisterType((*QueryFindFile)(nil), "canine_chain.storage.QueryFindFile")
	proto.RegisterType((*QueryFindFileResponse)(nil), "canine_chain.storage.QueryFindFileResponse")
	proto.RegisterType((*QueryClientFreeSpace)(nil), "canine_chain.storage.QueryClientFreeSpace")
	proto.RegisterType((*QueryClientFreeSpaceResponse)(nil), "canine_chain.storage.QueryClientFreeSpaceResponse")
	proto.RegisterType((*QueryPayData)(nil), "canine_chain.storage.QueryPayData")
	proto.RegisterType((*QueryPayDataResponse)(nil), "canine_chain.storage.QueryPayDataResponse")
	proto.RegisterType((*QueryStoragePaymentInfo)(nil), "canine_chain.storage.QueryStoragePaymentInfo")
	proto.RegisterType((*QueryStoragePaymentInfoResponse)(nil), "canine_chain.storage.QueryStoragePaymentInfoResponse")
	proto.RegisterType((*QueryAllStoragePaymentInfo)(nil), "canine_chain.storage.QueryAllStoragePaymentInfo")
	proto.RegisterType((*QueryAllStoragePaymentInfoResponse)(nil), "canine_chain.storage.QueryAllStoragePaymentInfoResponse")
	proto.RegisterType((*QueryFileUploadCheck)(nil), "canine_chain.storage.QueryFileUploadCheck")
	proto.RegisterType((*QueryFileUploadCheckResponse)(nil), "canine_chain.storage.QueryFileUploadCheckResponse")
	proto.RegisterType((*QueryPriceCheck)(nil), "canine_chain.storage.QueryPriceCheck")
	proto.RegisterType((*QueryPriceCheckResponse)(nil), "canine_chain.storage.QueryPriceCheckResponse")
	proto.RegisterType((*QueryActiveProviders)(nil), "canine_chain.storage.QueryActiveProviders")
	proto.RegisterType((*QueryActiveProvidersResponse)(nil), "canine_chain.storage.QueryActiveProvidersResponse")
	proto.RegisterType((*QueryStorageStats)(nil), "canine_chain.storage.QueryStorageStats")
	proto.RegisterType((*QueryStorageStatsResponse)(nil), "canine_chain.storage.QueryStorageStatsResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "canine_chain.storage.QueryStorageStatsResponse.UsersByPlanEntry")
}

func init() { proto.RegisterFile("canine_chain/storage/query.proto", fileDescriptor_9fe03bff51a37284) }

var fileDescriptor_9fe03bff51a37284 = []byte{
	// 2102 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdf, 0x6f, 0x5c, 0x47,
	0xf5, 0xcf, 0xf8, 0x57, 0xbd, 0x67, 0x9d, 0x3a, 0xdf, 0xa9, 0x9b, 0xaf, 0x59, 0x05, 0xdb, 0x99,
	0xf8, 0x57, 0x9c, 0x78, 0x6f, 0xec, 0x90, 0x12, 0x92, 0x26, 0x6a, 0xec, 0xe0, 0x10, 0xd1, 0x10,
	0x67, 0xad, 0xa8, 0x50, 0x24, 0x96, 0xf1, 0xee, 0x78, 0x73, 0xf1, 0xfa, 0xde, 0xdb, 0x7b, 0xef,
	0x06, 0x56, 0x96, 0x5f, 0xc8, 0x0b, 0x48, 0x3c, 0x54, 0x42, 0x45, 0x50, 0x21, 0x81, 0x50, 0x55,
	0xa8, 0xc4, 0x0b, 0x2f, 0x80, 0xf8, 0x0b, 0xfa, 0x46, 0x25, 0x5e, 0x80, 0x87, 0x0a, 0x25, 0xf0,
	0x7f, 0xa0, 0xf9, 0xb9, 0xb3, 0xeb, 0xbb, 0xb3, 0xeb, 0x6a, 0x11, 0x3c, 0x79, 0x67, 0xee, 0xe7,
	0x9c, 0xf3, 0x39, 0x67, 0xce, 0xcc, 0x99, 0x33, 0x32, 0xcc, 0x55, 0x68, 0xe0, 0x07, 0xac, 0x5c,
	0x79, 0x42, 0xfd, 0xc0, 0x4b, 0xd2, 0x30, 0xa6, 0x35, 0xe6, 0xbd, 0xd3, 0x60, 0x71, 0xb3, 0x18,
	0xc5, 0x61, 0x1a, 0xe2, 0x29, 0x1b, 0x51, 0x54, 0x88, 0xc2, 0x54, 0x2d, 0xac, 0x85, 0x02, 0xe0,
	0xf1, 0x5f, 0x12, 0x5b, 0x38, 0x57, 0x0b, 0xc3, 0x5a, 0x9d, 0x79, 0x34, 0xf2, 0x3d, 0x1a, 0x04,
	0x61, 0x4a, 0x53, 0x3f, 0x0c, 0x12, 0xf5, 0x75, 0xa5, 0x12, 0x26, 0x07, 0x61, 0xe2, 0xed, 0xd2,
	0x44, 0x99, 0xf0, 0x9e, 0xae, 0xed, 0xb2, 0x94, 0xae, 0x79, 0x11, 0xad, 0xf9, 0x81, 0x00, 0x2b,
	0xec, 0xf9, 0x4c, 0x5e, 0x11, 0x8d, 0xe9, 0x81, 0x56, 0xb7, 0x94, 0x09, 0xa1, 0x95, 0xd4, 0x7f,
	0xca, 0xca, 0x55, 0x46, 0xeb, 0x1a, 0x38, 0x9f, 0xad, 0x2b, 0x0e, 0x9f, 0xfa, 0x55, 0x16, 0xbb,
	0xd5, 0x45, 0xb4, 0x79, 0xc0, 0x82, 0xb4, 0xec, 0x07, 0x7b, 0xca, 0x49, 0x72, 0x1a, 0xf2, 0x8f,
	0x38, 0xf9, 0x6d, 0x41, 0x86, 0x3c, 0x82, 0x57, 0xac, 0x61, 0x89, 0x25, 0x51, 0x18, 0x24, 0x0c,
	0xdf, 0x80, 0x31, 0xc9, 0x76, 0x1a, 0xcd, 0xa1, 0xe5, 0xfc, 0xfa, 0xb9, 0x62, 0x56, 0x1c, 0x8b,
	0x52, 0x6a, 0x63, 0xe4, 0xe3, 0x4f, 0x67, 0x4f, 0x95, 0x94, 0x04, 0x39, 0x04, 0x90, 0x2a, 0xe3,
	0x30, 0xdc, 0xc3, 0x17, 0xe1, 0x8c, 0xe6, 0x5a, 0xa6, 0xd5, 0x6a, 0xcc, 0x12, 0xa9, 0x33, 0x57,
	0x9a, 0xd4, 0xf3, 0x77, 0xe4, 0x34, 0x3e, 0x0b, 0x63, 0x07, 0x2c, 0xde, 0xaf, 0xb3, 0xe9, 0xa1,
	0x39, 0xb4, 0x3c, 0x51, 0x52, 0x23, 0x3c, 0x05, 0xa3, 0xe1, 0x77, 0x03, 0x16, 0x4f, 0x0f, 0x0b,
	0x39, 0x39, 0xe0, 0xb3, 0x49, 0x4a, 0xe3, 0x74, 0x7a, 0x64, 0x0e, 0x2d, 0x0f, 0x97, 0xe4, 0x80,
	0x3c, 0x02, 0xdc, 0x32, 0x6e, 0xdc, 0xb9, 0x09, 0xa3, 0x11, 0x9f, 0x50, 0xde, 0xcc, 0x66, 0x7b,
	0xb3, 0xe5, 0xd7, 0x99, 0x90, 0x53, 0x0e, 0x49, 0x19, 0xf2, 0x43, 0x04, 0x53, 0x2d, 0x9d, 0xc9,
	0x46, 0x53, 0xf3, 0x3d, 0x81, 0x6b, 0x5b, 0x00, 0xad, 0x24, 0x11, 0xee, 0xe5, 0xd7, 0x17, 0x8b,
	0x32, 0xa3, 0x8a, 0x3c, 0xa3, 0x8a, 0x32, 0x69, 0x55, 0x46, 0x15, 0xb7, 0x69, 0x8d, 0x95, 0xd8,
	0x3b, 0x0d, 0x96, 0xa4, 0x25, 0x4b, 0x92, 0x7c, 0x88, 0xe0, 0x5c, 0x16, 0x17, 0xe3, 0xe9, 0x2d,
	0x18, 0x13, 0xac, 0x39, 0x93, 0xe1, 0xfe, 0x5d, 0x55, 0x42, 0xf8, 0x5e, 0x06, 0xcf, 0xa5, 0x9e,
	0x3c, 0xa5, 0xed, 0x36, 0xa2, 0x5f, 0x87, 0x97, 0x05, 0xcf, 0x3b, 0xf5, 0xba, 0xa4, 0xda, 0x11,
	0x02, 0xf4, 0x99, 0x43, 0xf0, 0x4b, 0x04, 0x67, 0xdb, 0x55, 0xff, 0xcf, 0x39, 0xff, 0x10, 0x72,
	0x82, 0x21, 0x37, 0x64, 0x65, 0x35, 0xca, 0xce, 0xea, 0xa1, 0xcc, 0xac, 0x1e, 0xb6, 0xb3, 0x7a,
	0x1b, 0xfe, 0xcf, 0x28, 0xb4, 0x92, 0x7a, 0x64, 0xcf, 0x57, 0x6a, 0xf3, 0xeb, 0xe7, 0xb3, 0x7d,
	0x7d, 0x1c, 0xf8, 0x7b, 0x3e, 0xab, 0x72, 0x41, 0xe5, 0xad, 0x10, 0x22, 0x6f, 0xc1, 0x69, 0x1d,
	0x44, 0xfe, 0x6d, 0x70, 0xcb, 0xf3, 0x0c, 0xa9, 0x95, 0x7f, 0x18, 0xb1, 0x40, 0xaa, 0xfe, 0x2f,
	0xec, 0x93, 0x5f, 0x20, 0x78, 0xb5, 0xcd, 0x3f, 0x2b, 0x47, 0x46, 0x79, 0x00, 0x74, 0x8a, 0xf4,
	0x1d, 0x36, 0x29, 0x35, 0xb8, 0x1c, 0xb9, 0xa8, 0x16, 0x60, 0x5b, 0x45, 0x00, 0x4f, 0xc3, 0x4b,
	0xed, 0xc1, 0xd1, 0x43, 0xf2, 0xb6, 0xf2, 0x45, 0x43, 0x8d, 0x2f, 0x77, 0x60, 0x5c, 0x07, 0xd0,
	0x7d, 0xb2, 0x69, 0x49, 0x7d, 0x54, 0x1b, 0x31, 0xf2, 0x4d, 0x95, 0x59, 0x72, 0x33, 0x49, 0xd0,
	0xc0, 0x72, 0xe1, 0x23, 0x04, 0x9f, 0x3b, 0xa6, 0xdd, 0xb0, 0xdf, 0x84, 0x9c, 0xa9, 0x62, 0xee,
	0x0d, 0xdb, 0x49, 0xbf, 0x25, 0x37, 0xb8, 0xf5, 0x08, 0xe0, 0x8c, 0xa4, 0x9a, 0xa6, 0x2c, 0x91,
	0x95, 0x9f, 0x6f, 0x5d, 0x6e, 0x49, 0x45, 0x37, 0x57, 0x52, 0xa3, 0x81, 0x14, 0x2a, 0x1f, 0xa6,
	0x3b, 0xed, 0x99, 0xc8, 0x3c, 0x80, 0x3c, 0x6d, 0x4d, 0xab, 0x05, 0x58, 0xc8, 0x8e, 0x8d, 0x25,
	0xbf, 0x15, 0xc6, 0x07, 0x2a, 0x42, 0xb6, 0x3c, 0xf9, 0x96, 0xaa, 0x5f, 0x77, 0xea, 0x75, 0x0b,
	0x3d, 0xb8, 0x65, 0xfe, 0xa3, 0x2e, 0x4a, 0x1d, 0x06, 0x8c, 0x3f, 0x0f, 0x61, 0xc2, 0xe2, 0xa3,
	0x17, 0xfb, 0x44, 0x0e, 0xb5, 0x29, 0x18, 0xdc, 0xaa, 0xfb, 0xea, 0x36, 0x54, 0x62, 0x51, 0x18,
	0xa7, 0xff, 0xd1, 0x05, 0x7f, 0xac, 0x6e, 0x5a, 0xd2, 0x94, 0x89, 0xcd, 0x6d, 0x18, 0x8b, 0xc5,
	0x8c, 0x5a, 0x80, 0xb9, 0xec, 0xa8, 0x48, 0x29, 0x2b, 0x20, 0x4a, 0x8a, 0x7c, 0x03, 0x26, 0x75,
	0xec, 0x25, 0x66, 0x70, 0xeb, 0xfa, 0x01, 0x82, 0xff, 0xef, 0xd0, 0x6d, 0x68, 0xbf, 0x01, 0x2f,
	0x49, 0x02, 0x7a, 0x35, 0xfb, 0xe5, 0xad, 0xc5, 0x06, 0xb7, 0x86, 0x2b, 0xaa, 0xe0, 0x6c, 0xc5,
	0x8c, 0xed, 0x44, 0xb4, 0xc2, 0x1c, 0x47, 0xe9, 0x25, 0x15, 0xad, 0x9d, 0x34, 0x8c, 0xd9, 0x66,
	0xd8, 0x08, 0x52, 0x07, 0xb8, 0xa8, 0x2e, 0x1a, 0x46, 0xb1, 0xf1, 0x9e, 0xaf, 0x30, 0x9f, 0x10,
	0x12, 0x7c, 0x85, 0xf9, 0x80, 0x78, 0x2a, 0x5c, 0x2d, 0xe5, 0xb6, 0x40, 0x85, 0x4f, 0x68, 0x01,
	0x31, 0x20, 0x4b, 0xaa, 0x06, 0x6c, 0xf9, 0x41, 0xd5, 0x75, 0x57, 0x20, 0x37, 0x54, 0x05, 0xd0,
	0x40, 0xa3, 0xf7, 0x3c, 0x4c, 0x98, 0xd2, 0xea, 0x47, 0xda, 0x83, 0xbc, 0x9e, 0xbb, 0x1f, 0x25,
	0xe4, 0x8a, 0xda, 0xfd, 0x9b, 0x75, 0x9f, 0x05, 0x69, 0x3f, 0x41, 0xba, 0xa5, 0xb6, 0x73, 0x87,
	0x84, 0x31, 0xfa, 0x79, 0x80, 0xdd, 0x66, 0xca, 0x92, 0xf2, 0x5e, 0xcc, 0x74, 0x08, 0x72, 0x62,
	0x86, 0x63, 0xc9, 0x32, 0x4c, 0xa8, 0x96, 0xa2, 0x79, 0x97, 0xa6, 0xd4, 0x61, 0x68, 0x47, 0x5f,
	0xac, 0x25, 0xd2, 0x18, 0x58, 0x80, 0x97, 0x53, 0xff, 0x80, 0x95, 0x63, 0x76, 0x40, 0xfd, 0xc0,
	0x0f, 0x6a, 0xca, 0xc8, 0x69, 0x3e, 0x5b, 0xd2, 0x93, 0x3c, 0xa8, 0xc2, 0xaa, 0x48, 0x9e, 0xe1,
	0x92, 0x1c, 0x90, 0xab, 0xd6, 0x2a, 0xd0, 0x1a, 0xdb, 0x96, 0x2d, 0xd0, 0xfd, 0x60, 0x2f, 0x74,
	0x30, 0x79, 0x86, 0x60, 0xb6, 0x8b, 0x94, 0x61, 0xf5, 0x6d, 0x98, 0x52, 0x59, 0x5d, 0xb6, 0xfb,
	0x2a, 0xb5, 0xc1, 0x96, 0xb3, 0xf3, 0xff, 0xb8, 0x3e, 0xb5, 0x0f, 0x70, 0x72, 0xec, 0x0b, 0xa9,
	0x42, 0x41, 0xef, 0xb7, 0x0c, 0xf6, 0x83, 0xda, 0xd6, 0x7f, 0x46, 0x40, 0xba, 0x9b, 0xe9, 0xc3,
	0xdd, 0xe1, 0xc1, 0xb8, 0x3b, 0xb8, 0x13, 0x60, 0x4b, 0xe5, 0x11, 0xdf, 0x1a, 0x8f, 0xa3, 0x7a,
	0x48, 0xab, 0x9b, 0x4f, 0x58, 0x65, 0xbf, 0xfb, 0x7a, 0x77, 0x49, 0x9d, 0x2f, 0xa8, 0xc4, 0xef,
	0xd0, 0x63, 0xef, 0xe2, 0xa7, 0xb4, 0xee, 0x57, 0x85, 0xb6, 0xf1, 0x92, 0x1c, 0x90, 0x4d, 0x75,
	0xa6, 0x6c, 0xc7, 0x7e, 0x85, 0x49, 0xc3, 0x05, 0x18, 0xaf, 0x36, 0xe2, 0xd6, 0x42, 0xe5, 0x4a,
	0x66, 0xdc, 0xc5, 0xb4, 0x3e, 0x3b, 0x5a, 0x4a, 0x6c, 0xab, 0x11, 0x9f, 0xd5, 0x67, 0x87, 0x18,
	0x90, 0xb3, 0xba, 0xa8, 0x8b, 0x17, 0x03, 0x73, 0x43, 0x22, 0xbe, 0xae, 0xc5, 0xed, 0xf3, 0x46,
	0xdb, 0xfd, 0xe3, 0xb7, 0xae, 0x6e, 0x85, 0xb8, 0x5d, 0xc3, 0xb1, 0xbb, 0x17, 0x79, 0x45, 0xdd,
	0x1d, 0xd5, 0xa2, 0xef, 0xa4, 0x34, 0x4d, 0xc8, 0xbf, 0x86, 0xd4, 0x9d, 0xcf, 0x9e, 0x35, 0xd6,
	0xcf, 0x41, 0x2e, 0x6a, 0xc4, 0x95, 0x27, 0x34, 0x61, 0x32, 0x8a, 0x23, 0xa5, 0xd6, 0x04, 0xc6,
	0x30, 0xd2, 0xe0, 0x1f, 0x86, 0xc4, 0x07, 0xf1, 0x1b, 0x3f, 0x00, 0xe0, 0x7f, 0xcb, 0x22, 0x7a,
	0xa2, 0xce, 0x4e, 0x6c, 0x14, 0x39, 0x93, 0xbf, 0x7f, 0x3a, 0xbb, 0x58, 0xf3, 0xd3, 0x27, 0x8d,
	0xdd, 0x62, 0x25, 0x3c, 0xf0, 0xd4, 0xeb, 0x8c, 0xfc, 0xb3, 0x9a, 0x54, 0xf7, 0xbd, 0xb4, 0x19,
	0xb1, 0xa4, 0x78, 0x97, 0x55, 0x4a, 0x39, 0xae, 0xa1, 0xc4, 0x15, 0xf0, 0x03, 0x53, 0xbd, 0xb1,
	0x34, 0x12, 0x1e, 0x81, 0x11, 0x61, 0x2a, 0x2f, 0xe7, 0x1e, 0xf3, 0x29, 0x5c, 0x85, 0xd3, 0xe2,
	0x5b, 0x79, 0xb7, 0x59, 0x8e, 0xea, 0x34, 0x98, 0x1e, 0x15, 0x51, 0x7a, 0x23, 0x3b, 0x4a, 0x5d,
	0x7d, 0x2d, 0x0a, 0x6d, 0x1b, 0xcd, 0xed, 0x3a, 0x0d, 0xbe, 0x1c, 0xa4, 0x71, 0xb3, 0x94, 0x6f,
	0xb4, 0x66, 0x0a, 0xb7, 0xe1, 0x4c, 0x27, 0x00, 0x9f, 0x81, 0xe1, 0x7d, 0xd6, 0x54, 0xeb, 0xcc,
	0x7f, 0xaa, 0x8c, 0x6b, 0x30, 0x9d, 0x2c, 0x62, 0x70, 0x63, 0xe8, 0x3a, 0x5a, 0xff, 0xdb, 0x0c,
	0x8c, 0x0a, 0xdb, 0xf8, 0x19, 0x82, 0x31, 0xf9, 0x10, 0x83, 0xcf, 0x3b, 0x38, 0x4a, 0x48, 0xe1,
	0x62, 0x4f, 0x88, 0x76, 0x80, 0x5c, 0xfa, 0xfe, 0x5f, 0xfe, 0xf9, 0xe3, 0xa1, 0x05, 0x7c, 0xc1,
	0xfb, 0x0e, 0xad, 0xec, 0xd3, 0xba, 0x27, 0x25, 0x57, 0xb3, 0x5e, 0xb5, 0xf0, 0x7b, 0x08, 0x46,
	0x44, 0x0d, 0x9b, 0x75, 0x18, 0xe0, 0x80, 0xc2, 0x52, 0x0f, 0x80, 0xb1, 0xbf, 0x29, 0xec, 0xdf,
	0xc2, 0x37, 0x9d, 0xf6, 0x45, 0x5f, 0xe6, 0x1d, 0xca, 0x4a, 0x79, 0xe4, 0x1d, 0x8a, 0x3b, 0xd8,
	0x91, 0x77, 0x28, 0x6e, 0x5d, 0x47, 0xf8, 0x07, 0x08, 0xc6, 0x4d, 0x93, 0x7b, 0xc1, 0x61, 0x5a,
	0x83, 0x0a, 0x97, 0xfa, 0x00, 0x19, 0x8e, 0x2b, 0x82, 0xe3, 0x3c, 0x26, 0xbd, 0x39, 0xe2, 0x5f,
	0x21, 0xc8, 0xb5, 0xba, 0xe2, 0x79, 0x87, 0x19, 0x83, 0x3a, 0x19, 0x99, 0x0d, 0x41, 0xe6, 0x75,
	0x7c, 0xc3, 0x49, 0x26, 0x8c, 0x58, 0x50, 0x56, 0x51, 0xeb, 0xec, 0xcb, 0x8f, 0xf0, 0x6f, 0x11,
	0x8c, 0xca, 0x97, 0xbb, 0x39, 0x57, 0xa6, 0x70, 0x44, 0x61, 0xb9, 0x17, 0xc2, 0x30, 0x7b, 0x4b,
	0x30, 0x7b, 0x84, 0x1f, 0xba, 0x53, 0x49, 0xbc, 0xc3, 0x64, 0xb0, 0xea, 0xbe, 0xbc, 0x3f, 0x42,
	0x90, 0x6b, 0xbd, 0x31, 0xcd, 0xbb, 0xa3, 0x25, 0x51, 0x85, 0xcb, 0xfd, 0xa0, 0x4e, 0xba, 0x0b,
	0x24, 0x81, 0xdf, 0x21, 0x98, 0xec, 0x7c, 0x26, 0x5c, 0xe9, 0x15, 0xa5, 0x16, 0xb6, 0xb0, 0xde,
	0x3f, 0xd6, 0x10, 0xbc, 0x2d, 0x08, 0x5e, 0xc7, 0xaf, 0x7d, 0xb6, 0xd8, 0xe2, 0x9f, 0x20, 0x18,
	0x37, 0xaf, 0x10, 0x17, 0xdc, 0x04, 0x04, 0xc8, 0x99, 0x94, 0x9d, 0x8f, 0x14, 0xe4, 0xba, 0xa0,
	0xb7, 0x8e, 0xaf, 0xf4, 0xa2, 0x27, 0xab, 0x8a, 0x77, 0x68, 0x88, 0xfd, 0x14, 0xc1, 0x44, 0xdb,
	0xbb, 0xc4, 0x52, 0xcf, 0x85, 0x93, 0xc0, 0x82, 0xd7, 0x27, 0xd0, 0x90, 0x2c, 0x0a, 0x92, 0xcb,
	0x78, 0xb1, 0x3f, 0x92, 0xf8, 0x4f, 0x08, 0xf2, 0xf6, 0x4b, 0xc1, 0xa2, 0xcb, 0x60, 0x0b, 0x57,
	0x28, 0xf6, 0x87, 0x33, 0xbc, 0x76, 0x04, 0xaf, 0x07, 0xf8, 0xab, 0x4e, 0x5e, 0x76, 0x6f, 0x2c,
	0x57, 0x58, 0x6c, 0x91, 0x6e, 0x7b, 0xe6, 0x03, 0x04, 0x93, 0x9d, 0x6f, 0x01, 0x2b, 0xee, 0x88,
	0xd9, 0x58, 0x67, 0x92, 0x76, 0x79, 0x02, 0x20, 0x6b, 0xc2, 0x91, 0x4b, 0xf8, 0x62, 0xdf, 0x8e,
	0xe0, 0x0f, 0x11, 0x8c, 0xa9, 0xbe, 0xdc, 0x55, 0xd7, 0x24, 0xc4, 0x59, 0xd7, 0xda, 0x5b, 0x6e,
	0xf2, 0x35, 0xc1, 0xe5, 0x2b, 0x78, 0xcb, 0xc9, 0x45, 0xf5, 0xa9, 0x7d, 0xc4, 0xf3, 0x5d, 0x04,
	0x60, 0xb5, 0xdf, 0x0b, 0xee, 0xf0, 0x28, 0x58, 0x61, 0xb5, 0x2f, 0x98, 0x21, 0x7d, 0x59, 0x90,
	0x5e, 0xc4, 0xf3, 0xfd, 0x90, 0xc6, 0xef, 0x23, 0xc8, 0xb5, 0x5a, 0x3d, 0xd7, 0xb1, 0x68, 0x50,
	0xce, 0x63, 0xf1, 0x58, 0x13, 0x48, 0xbe, 0x24, 0xf8, 0x5c, 0xc5, 0x6b, 0xee, 0xc2, 0x17, 0x33,
	0x56, 0x16, 0xdd, 0xb1, 0xb5, 0xaf, 0xdf, 0x47, 0x00, 0x56, 0x03, 0xbe, 0xd0, 0xe3, 0x62, 0x25,
	0x61, 0xce, 0x78, 0x1d, 0xef, 0xb8, 0xc9, 0x6b, 0x82, 0xdf, 0x15, 0x5c, 0x74, 0xf2, 0xe3, 0x7f,
	0xfd, 0xa0, 0x66, 0x91, 0x7b, 0x0f, 0xc1, 0xb8, 0xe9, 0xc7, 0x2f, 0x38, 0xaf, 0x2a, 0x12, 0xe4,
	0x3c, 0x0d, 0x3b, 0x1b, 0x76, 0xf2, 0x45, 0x41, 0x6b, 0x0d, 0x7b, 0x3d, 0xee, 0x0b, 0x41, 0x55,
	0x94, 0x68, 0x93, 0x74, 0xfc, 0xc4, 0xc1, 0xf7, 0x58, 0xda, 0xd9, 0xc5, 0xbb, 0xf6, 0x6d, 0x07,
	0xd6, 0xb9, 0x6f, 0xbb, 0xf4, 0xfa, 0xe4, 0xae, 0xe0, 0x7b, 0x1b, 0xbf, 0xee, 0xe4, 0x5b, 0x63,
	0x69, 0xb9, 0x22, 0x34, 0x94, 0x33, 0x57, 0xfc, 0x67, 0x08, 0xe0, 0x1e, 0x4b, 0xf5, 0x8b, 0x00,
	0x71, 0xde, 0x41, 0x05, 0xa6, 0xb0, 0xd2, 0x1b, 0x63, 0x48, 0xde, 0x14, 0x24, 0xaf, 0xe1, 0xab,
	0x3d, 0x49, 0x46, 0xb4, 0x59, 0xae, 0xd2, 0x94, 0x5a, 0xdc, 0xfe, 0x80, 0x00, 0x67, 0x74, 0xdb,
	0xab, 0xbd, 0xaf, 0xfb, 0x16, 0xbc, 0x70, 0xed, 0x44, 0xf0, 0x13, 0x32, 0xb7, 0xfb, 0x6f, 0x8b,
	0xf9, 0xef, 0x11, 0xbc, 0x9a, 0xfd, 0x54, 0x70, 0xc5, 0x7d, 0xb6, 0x64, 0xf0, 0xbf, 0x7e, 0x52,
	0x89, 0x13, 0x9e, 0xec, 0xb6, 0x0b, 0xf8, 0x23, 0x04, 0x93, 0x9d, 0xbd, 0xfa, 0x4a, 0x8f, 0xae,
	0xc0, 0xc2, 0x3a, 0x13, 0xb9, 0x4b, 0xef, 0xde, 0xe7, 0x79, 0xc0, 0xf7, 0x5c, 0xb9, 0x21, 0xc4,
	0xcb, 0x15, 0xc1, 0xeb, 0xd7, 0x08, 0xc0, 0xea, 0xec, 0x17, 0x9c, 0x57, 0x1f, 0x0d, 0x73, 0x1e,
	0x56, 0xc7, 0x5b, 0xfc, 0x3e, 0x3b, 0x1d, 0xd1, 0xf8, 0x4b, 0x5a, 0xde, 0xa1, 0x7e, 0x4f, 0x38,
	0xf2, 0x0e, 0xc5, 0x0b, 0xc2, 0x11, 0xfe, 0x0d, 0x2f, 0xeb, 0xed, 0x3d, 0xbb, 0xbb, 0xac, 0xb7,
	0x63, 0xdd, 0x65, 0x3d, 0xfb, 0x35, 0x81, 0x5c, 0x13, 0xc4, 0x3d, 0xbc, 0xea, 0x2e, 0xeb, 0xb2,
	0xe3, 0x6e, 0x5d, 0x9f, 0x7e, 0x8e, 0x60, 0xc2, 0xee, 0x99, 0x9d, 0x37, 0x3b, 0x1b, 0xe8, 0xbc,
	0xd9, 0x65, 0x75, 0xe1, 0x64, 0x5d, 0x30, 0xbc, 0x8c, 0x57, 0x7a, 0xd6, 0x01, 0x5a, 0x63, 0x65,
	0x7e, 0xf9, 0x48, 0x36, 0xde, 0xfc, 0xf8, 0xf9, 0x0c, 0xfa, 0xe4, 0xf9, 0x0c, 0xfa, 0xc7, 0xf3,
	0x19, 0xf4, 0xee, 0x8b, 0x99, 0x53, 0x9f, 0xbc, 0x98, 0x39, 0xf5, 0xd7, 0x17, 0x33, 0xa7, 0xde,
	0x5e, 0xb7, 0x5e, 0x1c, 0xa4, 0xbe, 0x37, 0xe9, 0x6e, 0xd2, 0xae, 0xf3, 0x7b, 0x46, 0xab, 0x78,
	0x81, 0xd8, 0x1d, 0x13, 0xff, 0x78, 0x71, 0xf5, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0xfa,
	0xd7, 0x47, 0xad, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a File by index.
	File(ctx context.Context, in *QueryFile, opts ...grpc.CallOption) (*QueryFileResponse, error)
	// Queries a list of File items.
	AllFiles(ctx context.Context, in *QueryAllFiles, opts ...grpc.CallOption) (*QueryAllFilesResponse, error)
	// Queries a list of open files.
	OpenFiles(ctx context.Context, in *QueryOpenFiles, opts ...grpc.CallOption) (*QueryAllFilesResponse, error)
	// Queries a Proof.
	Proof(ctx context.Context, in *QueryProof, opts ...grpc.CallOption) (*QueryProofResponse, error)
	// Queries a list of Proofs.
	AllProofs(ctx context.Context, in *QueryAllProofs, opts ...grpc.CallOption) (*QueryAllProofsResponse, error)
	// Queries a list of Proofs.
	ProofsByAddress(ctx context.Context, in *QueryProofsByAddress, opts ...grpc.CallOption) (*QueryProofsByAddressResponse, error)
	// Queries a Providers by index.
	Provider(ctx context.Context, in *QueryProvider, opts ...grpc.CallOption) (*QueryProviderResponse, error)
	// Queries a list of Providers items.
	AllProviders(ctx context.Context, in *QueryAllProviders, opts ...grpc.CallOption) (*QueryAllProvidersResponse, error)
	// Queries a Attestation by index.
	Attestation(ctx context.Context, in *QueryAttestation, opts ...grpc.CallOption) (*QueryAttestationResponse, error)
	// Queries a list of Attestation items.
	AllAttestations(ctx context.Context, in *QueryAllAttestations, opts ...grpc.CallOption) (*QueryAllAttestationsResponse, error)
	// Queries a Report by index.
	Report(ctx context.Context, in *QueryReport, opts ...grpc.CallOption) (*QueryReportResponse, error)
	// Queries a list of Attestation items.
	AllReports(ctx context.Context, in *QueryAllReports, opts ...grpc.CallOption) (*QueryAllReportsResponse, error)
	// Queries a list of FreeSpace items.
	FreeSpace(ctx context.Context, in *QueryFreeSpace, opts ...grpc.CallOption) (*QueryFreeSpaceResponse, error)
	// Queries how many files a provider is storing.
	StoreCount(ctx context.Context, in *QueryStoreCount, opts ...grpc.CallOption) (*QueryStoreCountResponse, error)
	// Queries where a file is located.
	FindFile(ctx context.Context, in *QueryFindFile, opts ...grpc.CallOption) (*QueryFindFileResponse, error)
	// Queries a list of GetClientFreeSpace items.
	GetClientFreeSpace(ctx context.Context, in *QueryClientFreeSpace, opts ...grpc.CallOption) (*QueryClientFreeSpaceResponse, error)
	// Queries a list of GetPayData items.
	GetPayData(ctx context.Context, in *QueryPayData, opts ...grpc.CallOption) (*QueryPayDataResponse, error)
	// Queries a StoragePaymentInfo by address.
	StoragePaymentInfo(ctx context.Context, in *QueryStoragePaymentInfo, opts ...grpc.CallOption) (*QueryStoragePaymentInfoResponse, error)
	// Queries a list of StoragePaymentInfo items.
	AllStoragePaymentInfo(ctx context.Context, in *QueryAllStoragePaymentInfo, opts ...grpc.CallOption) (*QueryAllStoragePaymentInfoResponse, error)
	// Queries whether user can upload a file based on size
	FileUploadCheck(ctx context.Context, in *QueryFileUploadCheck, opts ...grpc.CallOption) (*QueryFileUploadCheckResponse, error)
	// Queries whether user can upload a file based on size
	PriceCheck(ctx context.Context, in *QueryPriceCheck, opts ...grpc.CallOption) (*QueryPriceCheckResponse, error)
	// Queries whether user can upload a file based on size
	ActiveProviders(ctx context.Context, in *QueryActiveProviders, opts ...grpc.CallOption) (*QueryActiveProvidersResponse, error)
	// Queries the storage space used and purchased
	StorageStats(ctx context.Context, in *QueryStorageStats, opts ...grpc.CallOption) (*QueryStorageStatsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) File(ctx context.Context, in *QueryFile, opts ...grpc.CallOption) (*QueryFileResponse, error) {
	out := new(QueryFileResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/File", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllFiles(ctx context.Context, in *QueryAllFiles, opts ...grpc.CallOption) (*QueryAllFilesResponse, error) {
	out := new(QueryAllFilesResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/AllFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OpenFiles(ctx context.Context, in *QueryOpenFiles, opts ...grpc.CallOption) (*QueryAllFilesResponse, error) {
	out := new(QueryAllFilesResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/OpenFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proof(ctx context.Context, in *QueryProof, opts ...grpc.CallOption) (*QueryProofResponse, error) {
	out := new(QueryProofResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/Proof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllProofs(ctx context.Context, in *QueryAllProofs, opts ...grpc.CallOption) (*QueryAllProofsResponse, error) {
	out := new(QueryAllProofsResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/AllProofs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProofsByAddress(ctx context.Context, in *QueryProofsByAddress, opts ...grpc.CallOption) (*QueryProofsByAddressResponse, error) {
	out := new(QueryProofsByAddressResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/ProofsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Provider(ctx context.Context, in *QueryProvider, opts ...grpc.CallOption) (*QueryProviderResponse, error) {
	out := new(QueryProviderResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/Provider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllProviders(ctx context.Context, in *QueryAllProviders, opts ...grpc.CallOption) (*QueryAllProvidersResponse, error) {
	out := new(QueryAllProvidersResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/AllProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attestation(ctx context.Context, in *QueryAttestation, opts ...grpc.CallOption) (*QueryAttestationResponse, error) {
	out := new(QueryAttestationResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/Attestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllAttestations(ctx context.Context, in *QueryAllAttestations, opts ...grpc.CallOption) (*QueryAllAttestationsResponse, error) {
	out := new(QueryAllAttestationsResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/AllAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Report(ctx context.Context, in *QueryReport, opts ...grpc.CallOption) (*QueryReportResponse, error) {
	out := new(QueryReportResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllReports(ctx context.Context, in *QueryAllReports, opts ...grpc.CallOption) (*QueryAllReportsResponse, error) {
	out := new(QueryAllReportsResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/AllReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FreeSpace(ctx context.Context, in *QueryFreeSpace, opts ...grpc.CallOption) (*QueryFreeSpaceResponse, error) {
	out := new(QueryFreeSpaceResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/FreeSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoreCount(ctx context.Context, in *QueryStoreCount, opts ...grpc.CallOption) (*QueryStoreCountResponse, error) {
	out := new(QueryStoreCountResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/StoreCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FindFile(ctx context.Context, in *QueryFindFile, opts ...grpc.CallOption) (*QueryFindFileResponse, error) {
	out := new(QueryFindFileResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/FindFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetClientFreeSpace(ctx context.Context, in *QueryClientFreeSpace, opts ...grpc.CallOption) (*QueryClientFreeSpaceResponse, error) {
	out := new(QueryClientFreeSpaceResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/GetClientFreeSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPayData(ctx context.Context, in *QueryPayData, opts ...grpc.CallOption) (*QueryPayDataResponse, error) {
	out := new(QueryPayDataResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/GetPayData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoragePaymentInfo(ctx context.Context, in *QueryStoragePaymentInfo, opts ...grpc.CallOption) (*QueryStoragePaymentInfoResponse, error) {
	out := new(QueryStoragePaymentInfoResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/StoragePaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllStoragePaymentInfo(ctx context.Context, in *QueryAllStoragePaymentInfo, opts ...grpc.CallOption) (*QueryAllStoragePaymentInfoResponse, error) {
	out := new(QueryAllStoragePaymentInfoResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/AllStoragePaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FileUploadCheck(ctx context.Context, in *QueryFileUploadCheck, opts ...grpc.CallOption) (*QueryFileUploadCheckResponse, error) {
	out := new(QueryFileUploadCheckResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/FileUploadCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceCheck(ctx context.Context, in *QueryPriceCheck, opts ...grpc.CallOption) (*QueryPriceCheckResponse, error) {
	out := new(QueryPriceCheckResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/PriceCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveProviders(ctx context.Context, in *QueryActiveProviders, opts ...grpc.CallOption) (*QueryActiveProvidersResponse, error) {
	out := new(QueryActiveProvidersResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/ActiveProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StorageStats(ctx context.Context, in *QueryStorageStats, opts ...grpc.CallOption) (*QueryStorageStatsResponse, error) {
	out := new(QueryStorageStatsResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Query/StorageStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
	// Queries a File by index.
	File(context.Context, *QueryFile) (*QueryFileResponse, error)
	// Queries a list of File items.
	AllFiles(context.Context, *QueryAllFiles) (*QueryAllFilesResponse, error)
	// Queries a list of open files.
	OpenFiles(context.Context, *QueryOpenFiles) (*QueryAllFilesResponse, error)
	// Queries a Proof.
	Proof(context.Context, *QueryProof) (*QueryProofResponse, error)
	// Queries a list of Proofs.
	AllProofs(context.Context, *QueryAllProofs) (*QueryAllProofsResponse, error)
	// Queries a list of Proofs.
	ProofsByAddress(context.Context, *QueryProofsByAddress) (*QueryProofsByAddressResponse, error)
	// Queries a Providers by index.
	Provider(context.Context, *QueryProvider) (*QueryProviderResponse, error)
	// Queries a list of Providers items.
	AllProviders(context.Context, *QueryAllProviders) (*QueryAllProvidersResponse, error)
	// Queries a Attestation by index.
	Attestation(context.Context, *QueryAttestation) (*QueryAttestationResponse, error)
	// Queries a list of Attestation items.
	AllAttestations(context.Context, *QueryAllAttestations) (*QueryAllAttestationsResponse, error)
	// Queries a Report by index.
	Report(context.Context, *QueryReport) (*QueryReportResponse, error)
	// Queries a list of Attestation items.
	AllReports(context.Context, *QueryAllReports) (*QueryAllReportsResponse, error)
	// Queries a list of FreeSpace items.
	FreeSpace(context.Context, *QueryFreeSpace) (*QueryFreeSpaceResponse, error)
	// Queries how many files a provider is storing.
	StoreCount(context.Context, *QueryStoreCount) (*QueryStoreCountResponse, error)
	// Queries where a file is located.
	FindFile(context.Context, *QueryFindFile) (*QueryFindFileResponse, error)
	// Queries a list of GetClientFreeSpace items.
	GetClientFreeSpace(context.Context, *QueryClientFreeSpace) (*QueryClientFreeSpaceResponse, error)
	// Queries a list of GetPayData items.
	GetPayData(context.Context, *QueryPayData) (*QueryPayDataResponse, error)
	// Queries a StoragePaymentInfo by address.
	StoragePaymentInfo(context.Context, *QueryStoragePaymentInfo) (*QueryStoragePaymentInfoResponse, error)
	// Queries a list of StoragePaymentInfo items.
	AllStoragePaymentInfo(context.Context, *QueryAllStoragePaymentInfo) (*QueryAllStoragePaymentInfoResponse, error)
	// Queries whether user can upload a file based on size
	FileUploadCheck(context.Context, *QueryFileUploadCheck) (*QueryFileUploadCheckResponse, error)
	// Queries whether user can upload a file based on size
	PriceCheck(context.Context, *QueryPriceCheck) (*QueryPriceCheckResponse, error)
	// Queries whether user can upload a file based on size
	ActiveProviders(context.Context, *QueryActiveProviders) (*QueryActiveProvidersResponse, error)
	// Queries the storage space used and purchased
	StorageStats(context.Context, *QueryStorageStats) (*QueryStorageStatsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) File(ctx context.Context, req *QueryFile) (*QueryFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (*UnimplementedQueryServer) AllFiles(ctx context.Context, req *QueryAllFiles) (*QueryAllFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFiles not implemented")
}
func (*UnimplementedQueryServer) OpenFiles(ctx context.Context, req *QueryOpenFiles) (*QueryAllFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFiles not implemented")
}
func (*UnimplementedQueryServer) Proof(ctx context.Context, req *QueryProof) (*QueryProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proof not implemented")
}
func (*UnimplementedQueryServer) AllProofs(ctx context.Context, req *QueryAllProofs) (*QueryAllProofsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProofs not implemented")
}
func (*UnimplementedQueryServer) ProofsByAddress(ctx context.Context, req *QueryProofsByAddress) (*QueryProofsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProofsByAddress not implemented")
}
func (*UnimplementedQueryServer) Provider(ctx context.Context, req *QueryProvider) (*QueryProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provider not implemented")
}
func (*UnimplementedQueryServer) AllProviders(ctx context.Context, req *QueryAllProviders) (*QueryAllProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProviders not implemented")
}
func (*UnimplementedQueryServer) Attestation(ctx context.Context, req *QueryAttestation) (*QueryAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attestation not implemented")
}
func (*UnimplementedQueryServer) AllAttestations(ctx context.Context, req *QueryAllAttestations) (*QueryAllAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAttestations not implemented")
}
func (*UnimplementedQueryServer) Report(ctx context.Context, req *QueryReport) (*QueryReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (*UnimplementedQueryServer) AllReports(ctx context.Context, req *QueryAllReports) (*QueryAllReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReports not implemented")
}
func (*UnimplementedQueryServer) FreeSpace(ctx context.Context, req *QueryFreeSpace) (*QueryFreeSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeSpace not implemented")
}
func (*UnimplementedQueryServer) StoreCount(ctx context.Context, req *QueryStoreCount) (*QueryStoreCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCount not implemented")
}
func (*UnimplementedQueryServer) FindFile(ctx context.Context, req *QueryFindFile) (*QueryFindFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFile not implemented")
}
func (*UnimplementedQueryServer) GetClientFreeSpace(ctx context.Context, req *QueryClientFreeSpace) (*QueryClientFreeSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientFreeSpace not implemented")
}
func (*UnimplementedQueryServer) GetPayData(ctx context.Context, req *QueryPayData) (*QueryPayDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayData not implemented")
}
func (*UnimplementedQueryServer) StoragePaymentInfo(ctx context.Context, req *QueryStoragePaymentInfo) (*QueryStoragePaymentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoragePaymentInfo not implemented")
}
func (*UnimplementedQueryServer) AllStoragePaymentInfo(ctx context.Context, req *QueryAllStoragePaymentInfo) (*QueryAllStoragePaymentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStoragePaymentInfo not implemented")
}
func (*UnimplementedQueryServer) FileUploadCheck(ctx context.Context, req *QueryFileUploadCheck) (*QueryFileUploadCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadCheck not implemented")
}
func (*UnimplementedQueryServer) PriceCheck(ctx context.Context, req *QueryPriceCheck) (*QueryPriceCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceCheck not implemented")
}
func (*UnimplementedQueryServer) ActiveProviders(ctx context.Context, req *QueryActiveProviders) (*QueryActiveProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveProviders not implemented")
}
func (*UnimplementedQueryServer) StorageStats(ctx context.Context, req *QueryStorageStats) (*QueryStorageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageStats not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).File(ctx, req.(*QueryFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/AllFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllFiles(ctx, req.(*QueryAllFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OpenFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOpenFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OpenFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/OpenFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OpenFiles(ctx, req.(*QueryOpenFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/Proof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proof(ctx, req.(*QueryProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllProofs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProofs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllProofs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/AllProofs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllProofs(ctx, req.(*QueryAllProofs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProofsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProofsByAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProofsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/ProofsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProofsByAddress(ctx, req.(*QueryProofsByAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/Provider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Provider(ctx, req.(*QueryProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProviders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/AllProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllProviders(ctx, req.(*QueryAllProviders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/Attestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attestation(ctx, req.(*QueryAttestation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAttestations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/AllAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllAttestations(ctx, req.(*QueryAllAttestations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Report(ctx, req.(*QueryReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/AllReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllReports(ctx, req.(*QueryAllReports))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FreeSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFreeSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FreeSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/FreeSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FreeSpace(ctx, req.(*QueryFreeSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoreCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStoreCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoreCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/StoreCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoreCount(ctx, req.(*QueryStoreCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FindFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FindFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/FindFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FindFile(ctx, req.(*QueryFindFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetClientFreeSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientFreeSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetClientFreeSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/GetClientFreeSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetClientFreeSpace(ctx, req.(*QueryClientFreeSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPayData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPayData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPayData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/GetPayData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPayData(ctx, req.(*QueryPayData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoragePaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStoragePaymentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoragePaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/StoragePaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoragePaymentInfo(ctx, req.(*QueryStoragePaymentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllStoragePaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoragePaymentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllStoragePaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/AllStoragePaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllStoragePaymentInfo(ctx, req.(*QueryAllStoragePaymentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FileUploadCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFileUploadCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FileUploadCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/FileUploadCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FileUploadCheck(ctx, req.(*QueryFileUploadCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/PriceCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceCheck(ctx, req.(*QueryPriceCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveProviders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/ActiveProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveProviders(ctx, req.(*QueryActiveProviders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StorageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStorageStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StorageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Query/StorageStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StorageStats(ctx, req.(*QueryStorageStats))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canine_chain.storage.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "File",
			Handler:    _Query_File_Handler,
		},
		{
			MethodName: "AllFiles",
			Handler:    _Query_AllFiles_Handler,
		},
		{
			MethodName: "OpenFiles",
			Handler:    _Query_OpenFiles_Handler,
		},
		{
			MethodName: "Proof",
			Handler:    _Query_Proof_Handler,
		},
		{
			MethodName: "AllProofs",
			Handler:    _Query_AllProofs_Handler,
		},
		{
			MethodName: "ProofsByAddress",
			Handler:    _Query_ProofsByAddress_Handler,
		},
		{
			MethodName: "Provider",
			Handler:    _Query_Provider_Handler,
		},
		{
			MethodName: "AllProviders",
			Handler:    _Query_AllProviders_Handler,
		},
		{
			MethodName: "Attestation",
			Handler:    _Query_Attestation_Handler,
		},
		{
			MethodName: "AllAttestations",
			Handler:    _Query_AllAttestations_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Query_Report_Handler,
		},
		{
			MethodName: "AllReports",
			Handler:    _Query_AllReports_Handler,
		},
		{
			MethodName: "FreeSpace",
			Handler:    _Query_FreeSpace_Handler,
		},
		{
			MethodName: "StoreCount",
			Handler:    _Query_StoreCount_Handler,
		},
		{
			MethodName: "FindFile",
			Handler:    _Query_FindFile_Handler,
		},
		{
			MethodName: "GetClientFreeSpace",
			Handler:    _Query_GetClientFreeSpace_Handler,
		},
		{
			MethodName: "GetPayData",
			Handler:    _Query_GetPayData_Handler,
		},
		{
			MethodName: "StoragePaymentInfo",
			Handler:    _Query_StoragePaymentInfo_Handler,
		},
		{
			MethodName: "AllStoragePaymentInfo",
			Handler:    _Query_AllStoragePaymentInfo_Handler,
		},
		{
			MethodName: "FileUploadCheck",
			Handler:    _Query_FileUploadCheck_Handler,
		},
		{
			MethodName: "PriceCheck",
			Handler:    _Query_PriceCheck_Handler,
		},
		{
			MethodName: "ActiveProviders",
			Handler:    _Query_ActiveProviders_Handler,
		},
		{
			MethodName: "StorageStats",
			Handler:    _Query_StorageStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canine_chain/storage/query.proto",
}

func (m *QueryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProofsByAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofsByAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofsByAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProofs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProofs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProofs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProofsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProofsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProofsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOpenFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOpenFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOpenFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Provider.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProviders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProviders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProviders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReports) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReports) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReports) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReportsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReportsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReportsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFreeSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFreeSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFreeSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoreCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoreCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoreCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFreeSpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFreeSpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFreeSpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Space != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Space))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoreCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoreCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoreCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderIps) > 0 {
		i -= len(m.ProviderIps)
		copy(dAtA[i:], m.ProviderIps)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProviderIps)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClientFreeSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientFreeSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientFreeSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClientFreeSpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientFreeSpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientFreeSpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BytesFree != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BytesFree))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPayData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPayData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPayData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPayDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPayDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPayDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bytes != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeRemaining != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeRemaining))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoragePaymentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoragePaymentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoragePaymentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoragePaymentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoragePaymentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoragePaymentInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoragePaymentInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoragePaymentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoragePaymentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoragePaymentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoragePaymentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoragePaymentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoragePaymentInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoragePaymentInfo) > 0 {
		for iNdEx := len(m.StoragePaymentInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoragePaymentInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFileUploadCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFileUploadCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFileUploadCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bytes != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFileUploadCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFileUploadCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFileUploadCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bytes != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveProviders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveProviders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveProviders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActiveProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStorageStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStorageStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStorageStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStorageStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStorageStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStorageStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsersByPlan) > 0 {
		for k := range m.UsersByPlan {
			v := m.UsersByPlan[k]
			baseI := i
			i = encodeVarintQuery(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ActiveUsers != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ActiveUsers))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.UsedRatio.Size()
		i -= size
		if _, err := m.UsedRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Used != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Used))
		i--
		dAtA[i] = 0x10
	}
	if m.Purchased != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Purchased))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovQuery(uint64(m.Start))
	}
	return n
}

func (m *QueryProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proof.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProofsByAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProofsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proofs) > 0 {
		for _, e := range m.Proofs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProofs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProofsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proofs) > 0 {
		for _, e := range m.Proofs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovQuery(uint64(m.Start))
	}
	return n
}

func (m *QueryFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.File.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOpenFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Provider.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProviders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovQuery(uint64(m.Start))
	}
	return n
}

func (m *QueryAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Attestation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAttestations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAttestationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovQuery(uint64(m.Start))
	}
	return n
}

func (m *QueryReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Report.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllReports) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReportsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFreeSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStoreCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFreeSpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Space != 0 {
		n += 1 + sovQuery(uint64(m.Space))
	}
	return n
}

func (m *QueryStoreCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryFindFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderIps)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClientFreeSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClientFreeSpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BytesFree != 0 {
		n += 1 + sovQuery(uint64(m.BytesFree))
	}
	return n
}

func (m *QueryPayData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPayDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeRemaining != 0 {
		n += 1 + sovQuery(uint64(m.TimeRemaining))
	}
	if m.Bytes != 0 {
		n += 1 + sovQuery(uint64(m.Bytes))
	}
	return n
}

func (m *QueryStoragePaymentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStoragePaymentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoragePaymentInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoragePaymentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoragePaymentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoragePaymentInfo) > 0 {
		for _, e := range m.StoragePaymentInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFileUploadCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Bytes != 0 {
		n += 1 + sovQuery(uint64(m.Bytes))
	}
	return n
}

func (m *QueryFileUploadCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *QueryPriceCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Bytes != 0 {
		n += 1 + sovQuery(uint64(m.Bytes))
	}
	return n
}

func (m *QueryPriceCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != 0 {
		n += 1 + sovQuery(uint64(m.Price))
	}
	return n
}

func (m *QueryActiveProviders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActiveProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStorageStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStorageStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Purchased != 0 {
		n += 1 + sovQuery(uint64(m.Purchased))
	}
	if m.Used != 0 {
		n += 1 + sovQuery(uint64(m.Used))
	}
	l = m.UsedRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.ActiveUsers != 0 {
		n += 1 + sovQuery(uint64(m.ActiveUsers))
	}
	if len(m.UsersByPlan) > 0 {
		for k, v := range m.UsersByPlan {
			_ = k
			_ = v
			mapEntrySize := 1 + sovQuery(uint64(k)) + 1 + sovQuery(uint64(v))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofsByAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofsByAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofsByAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, FileProof{})
			if err := m.Proofs[len(m.Proofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProofs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProofs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProofs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProofsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProofsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProofsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, FileProof{})
			if err := m.Proofs[len(m.Proofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOpenFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOpenFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOpenFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, UnifiedFile{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProviders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProviders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProviders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, Providers{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, AttestationForm{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReports) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReports: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReports: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReportsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReportsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReportsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, ReportForm{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFreeSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFreeSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFreeSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoreCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoreCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoreCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFreeSpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFreeSpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFreeSpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoreCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoreCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoreCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderIps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientFreeSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientFreeSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientFreeSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientFreeSpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientFreeSpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientFreeSpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesFree", wireType)
			}
			m.BytesFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesFree |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPayData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPayData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPayData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPayDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPayDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPayDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeRemaining", wireType)
			}
			m.TimeRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeRemaining |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoragePaymentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoragePaymentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoragePaymentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoragePaymentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoragePaymentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoragePaymentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePaymentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoragePaymentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoragePaymentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoragePaymentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoragePaymentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoragePaymentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoragePaymentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoragePaymentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePaymentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePaymentInfo = append(m.StoragePaymentInfo, StoragePaymentInfo{})
			if err := m.StoragePaymentInfo[len(m.StoragePaymentInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFileUploadCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFileUploadCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFileUploadCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFileUploadCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFileUploadCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFileUploadCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveProviders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveProviders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveProviders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, ActiveProviders{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStorageStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStorageStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStorageStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStorageStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStorageStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStorageStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchased", wireType)
			}
			m.Purchased = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purchased |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedRatio", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsedRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveUsers", wireType)
			}
			m.ActiveUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveUsers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersByPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsersByPlan == nil {
				m.UsersByPlan = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UsersByPlan[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
