// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lp/l_pool.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LPool struct {
	Index  string       `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Name   string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Coins  []types.Coin `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins"`
	AMM_Id uint32       `protobuf:"varint,4,opt,name=aMM_Id,json=aMMId,proto3" json:"aMM_Id,omitempty"`
	// sdk.Dec in string representation
	SwapFeeMulti    string `protobuf:"bytes,5,opt,name=swap_fee_multi,json=swapFeeMulti,proto3" json:"swap_fee_multi,omitempty"`
	MinLockDuration int64  `protobuf:"varint,6,opt,name=min_lock_duration,json=minLockDuration,proto3" json:"min_lock_duration,omitempty"`
	// sdk.Dec in string representation
	PenaltyMulti   string `protobuf:"bytes,7,opt,name=penalty_multi,json=penaltyMulti,proto3" json:"penalty_multi,omitempty"`
	LptokenDenom   string `protobuf:"bytes,8,opt,name=lptoken_denom,json=lptokenDenom,proto3" json:"lptoken_denom,omitempty"`
	LPTokenBalance string `protobuf:"bytes,9,opt,name=LPTokenBalance,proto3" json:"LPTokenBalance,omitempty"`
}

func (m *LPool) Reset()         { *m = LPool{} }
func (m *LPool) String() string { return proto.CompactTextString(m) }
func (*LPool) ProtoMessage()    {}
func (*LPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_564aafd4c0e4e36b, []int{0}
}
func (m *LPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPool.Merge(m, src)
}
func (m *LPool) XXX_Size() int {
	return m.Size()
}
func (m *LPool) XXX_DiscardUnknown() {
	xxx_messageInfo_LPool.DiscardUnknown(m)
}

var xxx_messageInfo_LPool proto.InternalMessageInfo

func (m *LPool) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *LPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LPool) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *LPool) GetAMM_Id() uint32 {
	if m != nil {
		return m.AMM_Id
	}
	return 0
}

func (m *LPool) GetSwapFeeMulti() string {
	if m != nil {
		return m.SwapFeeMulti
	}
	return ""
}

func (m *LPool) GetMinLockDuration() int64 {
	if m != nil {
		return m.MinLockDuration
	}
	return 0
}

func (m *LPool) GetPenaltyMulti() string {
	if m != nil {
		return m.PenaltyMulti
	}
	return ""
}

func (m *LPool) GetLptokenDenom() string {
	if m != nil {
		return m.LptokenDenom
	}
	return ""
}

func (m *LPool) GetLPTokenBalance() string {
	if m != nil {
		return m.LPTokenBalance
	}
	return ""
}

func init() {
	proto.RegisterType((*LPool)(nil), "jackaldao.canine.lp.LPool")
}

func init() { proto.RegisterFile("lp/l_pool.proto", fileDescriptor_564aafd4c0e4e36b) }

var fileDescriptor_564aafd4c0e4e36b = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x8e, 0xd3, 0x30,
	0x18, 0x84, 0x93, 0x6d, 0x53, 0x58, 0x43, 0x77, 0x85, 0x59, 0x24, 0xb3, 0x87, 0x10, 0xb1, 0x08,
	0x22, 0x24, 0x6c, 0x2d, 0x88, 0x07, 0xa0, 0xac, 0x90, 0x56, 0x6a, 0xa4, 0x2a, 0xe2, 0xc4, 0x25,
	0x72, 0x1c, 0x53, 0x4c, 0x1c, 0xff, 0x56, 0xe3, 0x42, 0xfb, 0x16, 0xbc, 0x13, 0x97, 0x1e, 0x7b,
	0xe4, 0x84, 0x50, 0xfb, 0x22, 0x28, 0x71, 0x4e, 0x7b, 0x9b, 0xff, 0xd3, 0xfc, 0x33, 0x87, 0x41,
	0xe7, 0xda, 0x32, 0x5d, 0x58, 0x00, 0x4d, 0xed, 0x0a, 0x1c, 0xe0, 0xc7, 0xdf, 0xb9, 0xa8, 0xb9,
	0xae, 0x38, 0x50, 0xc1, 0x8d, 0x32, 0x92, 0x6a, 0x7b, 0x19, 0x0b, 0x68, 0x1b, 0x68, 0x59, 0xc9,
	0x5b, 0xc9, 0x7e, 0x5c, 0x97, 0xd2, 0xf1, 0x6b, 0x26, 0x40, 0x19, 0xff, 0x74, 0x79, 0xb1, 0x84,
	0x25, 0xf4, 0x92, 0x75, 0xca, 0xd3, 0xe7, 0xbf, 0x4f, 0x50, 0x34, 0x5f, 0x00, 0x68, 0x7c, 0x81,
	0x22, 0x65, 0x2a, 0xb9, 0x21, 0x61, 0x12, 0xa6, 0xa7, 0xb9, 0x3f, 0x30, 0x46, 0x63, 0xc3, 0x1b,
	0x49, 0x4e, 0x7a, 0xd8, 0x6b, 0xfc, 0x1e, 0x45, 0x5d, 0x6e, 0x4b, 0x46, 0xc9, 0x28, 0x7d, 0xf0,
	0xf6, 0x29, 0xf5, 0xcd, 0xb4, 0x6b, 0xa6, 0x43, 0x33, 0xfd, 0x08, 0xca, 0xcc, 0xc6, 0xbb, 0xbf,
	0xcf, 0x82, 0xdc, 0xbb, 0xf1, 0x13, 0x34, 0xe1, 0x59, 0x56, 0xdc, 0x56, 0x64, 0x9c, 0x84, 0xe9,
	0x34, 0x8f, 0x78, 0x96, 0xdd, 0x56, 0xf8, 0x05, 0x3a, 0x6b, 0x7f, 0x72, 0x5b, 0x7c, 0x95, 0xb2,
	0x68, 0xd6, 0xda, 0x29, 0x12, 0xf5, 0x5d, 0x0f, 0x3b, 0xfa, 0x49, 0xca, 0xac, 0x63, 0xf8, 0x35,
	0x7a, 0xd4, 0x28, 0x53, 0x68, 0x10, 0x75, 0x51, 0xad, 0x57, 0xdc, 0x29, 0x30, 0x64, 0x92, 0x84,
	0xe9, 0x28, 0x3f, 0x6f, 0x94, 0x99, 0x83, 0xa8, 0x6f, 0x06, 0x8c, 0xaf, 0xd0, 0xd4, 0x4a, 0xc3,
	0xb5, 0xdb, 0x0e, 0x81, 0xf7, 0x7c, 0xe0, 0x00, 0x7d, 0xe0, 0x15, 0x9a, 0x6a, 0xeb, 0xa0, 0x96,
	0xa6, 0xa8, 0xa4, 0x81, 0x86, 0xdc, 0xf7, 0xa6, 0x01, 0xde, 0x74, 0x0c, 0xbf, 0x44, 0x67, 0xf3,
	0xc5, 0xe7, 0xee, 0x9e, 0x71, 0xcd, 0x8d, 0x90, 0xe4, 0xb4, 0x77, 0xdd, 0xa1, 0xb3, 0x0f, 0xbb,
	0x43, 0x1c, 0xee, 0x0f, 0x71, 0xf8, 0xef, 0x10, 0x87, 0xbf, 0x8e, 0x71, 0xb0, 0x3f, 0xc6, 0xc1,
	0x9f, 0x63, 0x1c, 0x7c, 0x79, 0xb5, 0x54, 0xee, 0xdb, 0xba, 0xa4, 0x02, 0x1a, 0xe6, 0x57, 0x7b,
	0x53, 0x71, 0x60, 0x7e, 0x36, 0xb6, 0x61, 0xda, 0x32, 0xb7, 0xb5, 0xb2, 0x2d, 0x27, 0xfd, 0x1e,
	0xef, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x12, 0x93, 0xbc, 0xed, 0x01, 0x00, 0x00,
}

func (m *LPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LPTokenBalance) > 0 {
		i -= len(m.LPTokenBalance)
		copy(dAtA[i:], m.LPTokenBalance)
		i = encodeVarintLPool(dAtA, i, uint64(len(m.LPTokenBalance)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LptokenDenom) > 0 {
		i -= len(m.LptokenDenom)
		copy(dAtA[i:], m.LptokenDenom)
		i = encodeVarintLPool(dAtA, i, uint64(len(m.LptokenDenom)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PenaltyMulti) > 0 {
		i -= len(m.PenaltyMulti)
		copy(dAtA[i:], m.PenaltyMulti)
		i = encodeVarintLPool(dAtA, i, uint64(len(m.PenaltyMulti)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MinLockDuration != 0 {
		i = encodeVarintLPool(dAtA, i, uint64(m.MinLockDuration))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SwapFeeMulti) > 0 {
		i -= len(m.SwapFeeMulti)
		copy(dAtA[i:], m.SwapFeeMulti)
		i = encodeVarintLPool(dAtA, i, uint64(len(m.SwapFeeMulti)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AMM_Id != 0 {
		i = encodeVarintLPool(dAtA, i, uint64(m.AMM_Id))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLPool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLPool(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovLPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLPool(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLPool(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovLPool(uint64(l))
		}
	}
	if m.AMM_Id != 0 {
		n += 1 + sovLPool(uint64(m.AMM_Id))
	}
	l = len(m.SwapFeeMulti)
	if l > 0 {
		n += 1 + l + sovLPool(uint64(l))
	}
	if m.MinLockDuration != 0 {
		n += 1 + sovLPool(uint64(m.MinLockDuration))
	}
	l = len(m.PenaltyMulti)
	if l > 0 {
		n += 1 + l + sovLPool(uint64(l))
	}
	l = len(m.LptokenDenom)
	if l > 0 {
		n += 1 + l + sovLPool(uint64(l))
	}
	l = len(m.LPTokenBalance)
	if l > 0 {
		n += 1 + l + sovLPool(uint64(l))
	}
	return n
}

func sovLPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLPool(x uint64) (n int) {
	return sovLPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AMM_Id", wireType)
			}
			m.AMM_Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AMM_Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeeMulti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapFeeMulti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLockDuration", wireType)
			}
			m.MinLockDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLockDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyMulti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PenaltyMulti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LptokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LptokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LPTokenBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LPTokenBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLPool = fmt.Errorf("proto: unexpected end of group")
)
