// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/amm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPoolRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetPoolRequest) Reset()         { *m = QueryGetPoolRequest{} }
func (m *QueryGetPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolRequest) ProtoMessage()    {}
func (*QueryGetPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{2}
}
func (m *QueryGetPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolRequest.Merge(m, src)
}
func (m *QueryGetPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolRequest proto.InternalMessageInfo

func (m *QueryGetPoolRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetPoolResponse struct {
	Pool Pool `protobuf:"bytes,1,opt,name=Pool,proto3" json:"Pool"`
}

func (m *QueryGetPoolResponse) Reset()         { *m = QueryGetPoolResponse{} }
func (m *QueryGetPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolResponse) ProtoMessage()    {}
func (*QueryGetPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{3}
}
func (m *QueryGetPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolResponse.Merge(m, src)
}
func (m *QueryGetPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolResponse proto.InternalMessageInfo

func (m *QueryGetPoolResponse) GetPool() Pool {
	if m != nil {
		return m.Pool
	}
	return Pool{}
}

type QueryAlPoolRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAlPoolRequest) Reset()         { *m = QueryAlPoolRequest{} }
func (m *QueryAlPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAlPoolRequest) ProtoMessage()    {}
func (*QueryAlPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{4}
}
func (m *QueryAlPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAlPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAlPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAlPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAlPoolRequest.Merge(m, src)
}
func (m *QueryAlPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAlPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAlPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAlPoolRequest proto.InternalMessageInfo

func (m *QueryAlPoolRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAlPoolResponse struct {
	Pool       []Pool              `protobuf:"bytes,1,rep,name=Pool,proto3" json:"Pool"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAlPoolResponse) Reset()         { *m = QueryAlPoolResponse{} }
func (m *QueryAlPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAlPoolResponse) ProtoMessage()    {}
func (*QueryAlPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{5}
}
func (m *QueryAlPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAlPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAlPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAlPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAlPoolResponse.Merge(m, src)
}
func (m *QueryAlPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAlPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAlPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAlPoolResponse proto.InternalMessageInfo

func (m *QueryAlPoolResponse) GetPool() []Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *QueryAlPoolResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProviderRecordRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	PoolName string `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
}

func (m *QueryGetProviderRecordRequest) Reset()         { *m = QueryGetProviderRecordRequest{} }
func (m *QueryGetProviderRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProviderRecordRequest) ProtoMessage()    {}
func (*QueryGetProviderRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{6}
}
func (m *QueryGetProviderRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProviderRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProviderRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProviderRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProviderRecordRequest.Merge(m, src)
}
func (m *QueryGetProviderRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProviderRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProviderRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProviderRecordRequest proto.InternalMessageInfo

func (m *QueryGetProviderRecordRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *QueryGetProviderRecordRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

type QueryGetProviderRecordResponse struct {
	LProviderRecord ProviderRecord `protobuf:"bytes,1,opt,name=lProviderRecord,proto3" json:"lProviderRecord"`
}

func (m *QueryGetProviderRecordResponse) Reset()         { *m = QueryGetProviderRecordResponse{} }
func (m *QueryGetProviderRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProviderRecordResponse) ProtoMessage()    {}
func (*QueryGetProviderRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{7}
}
func (m *QueryGetProviderRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProviderRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProviderRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProviderRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProviderRecordResponse.Merge(m, src)
}
func (m *QueryGetProviderRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProviderRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProviderRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProviderRecordResponse proto.InternalMessageInfo

func (m *QueryGetProviderRecordResponse) GetLProviderRecord() ProviderRecord {
	if m != nil {
		return m.LProviderRecord
	}
	return ProviderRecord{}
}

type QueryEstimateSwapOutRequest struct {
	PoolName  string `protobuf:"bytes,1,opt,name=poolName,proto3" json:"poolName,omitempty"`
	InputCoin string `protobuf:"bytes,2,opt,name=inputCoin,proto3" json:"inputCoin,omitempty"`
}

func (m *QueryEstimateSwapOutRequest) Reset()         { *m = QueryEstimateSwapOutRequest{} }
func (m *QueryEstimateSwapOutRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateSwapOutRequest) ProtoMessage()    {}
func (*QueryEstimateSwapOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{8}
}
func (m *QueryEstimateSwapOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateSwapOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateSwapOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateSwapOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateSwapOutRequest.Merge(m, src)
}
func (m *QueryEstimateSwapOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateSwapOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateSwapOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateSwapOutRequest proto.InternalMessageInfo

func (m *QueryEstimateSwapOutRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *QueryEstimateSwapOutRequest) GetInputCoin() string {
	if m != nil {
		return m.InputCoin
	}
	return ""
}

type QueryEstimateSwapOutResponse struct {
	OutputCoin types.Coin `protobuf:"bytes,1,opt,name=outputCoin,proto3" json:"outputCoin"`
}

func (m *QueryEstimateSwapOutResponse) Reset()         { *m = QueryEstimateSwapOutResponse{} }
func (m *QueryEstimateSwapOutResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateSwapOutResponse) ProtoMessage()    {}
func (*QueryEstimateSwapOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{9}
}
func (m *QueryEstimateSwapOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateSwapOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateSwapOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateSwapOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateSwapOutResponse.Merge(m, src)
}
func (m *QueryEstimateSwapOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateSwapOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateSwapOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateSwapOutResponse proto.InternalMessageInfo

func (m *QueryEstimateSwapOutResponse) GetOutputCoin() types.Coin {
	if m != nil {
		return m.OutputCoin
	}
	return types.Coin{}
}

type QueryEstimateSwapInRequest struct {
	PoolName    string `protobuf:"bytes,1,opt,name=poolName,proto3" json:"poolName,omitempty"`
	OutputCoins string `protobuf:"bytes,2,opt,name=outputCoins,proto3" json:"outputCoins,omitempty"`
}

func (m *QueryEstimateSwapInRequest) Reset()         { *m = QueryEstimateSwapInRequest{} }
func (m *QueryEstimateSwapInRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateSwapInRequest) ProtoMessage()    {}
func (*QueryEstimateSwapInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{10}
}
func (m *QueryEstimateSwapInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateSwapInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateSwapInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateSwapInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateSwapInRequest.Merge(m, src)
}
func (m *QueryEstimateSwapInRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateSwapInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateSwapInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateSwapInRequest proto.InternalMessageInfo

func (m *QueryEstimateSwapInRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *QueryEstimateSwapInRequest) GetOutputCoins() string {
	if m != nil {
		return m.OutputCoins
	}
	return ""
}

type QueryEstimateSwapInResponse struct {
	InputCoins types.Coin `protobuf:"bytes,1,opt,name=inputCoins,proto3" json:"inputCoins"`
}

func (m *QueryEstimateSwapInResponse) Reset()         { *m = QueryEstimateSwapInResponse{} }
func (m *QueryEstimateSwapInResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateSwapInResponse) ProtoMessage()    {}
func (*QueryEstimateSwapInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{11}
}
func (m *QueryEstimateSwapInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateSwapInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateSwapInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateSwapInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateSwapInResponse.Merge(m, src)
}
func (m *QueryEstimateSwapInResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateSwapInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateSwapInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateSwapInResponse proto.InternalMessageInfo

func (m *QueryEstimateSwapInResponse) GetInputCoins() types.Coin {
	if m != nil {
		return m.InputCoins
	}
	return types.Coin{}
}

// Estimate amount of coins to deposit to get desired amount of LPToken
type QueryEstimateContributionRequest struct {
	PoolName      string `protobuf:"bytes,1,opt,name=poolName,proto3" json:"poolName,omitempty"`
	DesiredAmount string `protobuf:"bytes,2,opt,name=desiredAmount,proto3" json:"desiredAmount,omitempty"`
}

func (m *QueryEstimateContributionRequest) Reset()         { *m = QueryEstimateContributionRequest{} }
func (m *QueryEstimateContributionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateContributionRequest) ProtoMessage()    {}
func (*QueryEstimateContributionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{12}
}
func (m *QueryEstimateContributionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateContributionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateContributionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateContributionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateContributionRequest.Merge(m, src)
}
func (m *QueryEstimateContributionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateContributionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateContributionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateContributionRequest proto.InternalMessageInfo

func (m *QueryEstimateContributionRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *QueryEstimateContributionRequest) GetDesiredAmount() string {
	if m != nil {
		return m.DesiredAmount
	}
	return ""
}

type QueryEstimateContributionResponse struct {
	Coins []types.Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins"`
}

func (m *QueryEstimateContributionResponse) Reset()         { *m = QueryEstimateContributionResponse{} }
func (m *QueryEstimateContributionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateContributionResponse) ProtoMessage()    {}
func (*QueryEstimateContributionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{13}
}
func (m *QueryEstimateContributionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateContributionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateContributionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateContributionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateContributionResponse.Merge(m, src)
}
func (m *QueryEstimateContributionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateContributionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateContributionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateContributionResponse proto.InternalMessageInfo

func (m *QueryEstimateContributionResponse) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

// Query amount of coins to deposit to make a valid liquidity pair
type QueryMakeValidPairRequest struct {
	PoolName string `protobuf:"bytes,1,opt,name=poolName,proto3" json:"poolName,omitempty"`
	Coin     string `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *QueryMakeValidPairRequest) Reset()         { *m = QueryMakeValidPairRequest{} }
func (m *QueryMakeValidPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMakeValidPairRequest) ProtoMessage()    {}
func (*QueryMakeValidPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{14}
}
func (m *QueryMakeValidPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMakeValidPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMakeValidPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMakeValidPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMakeValidPairRequest.Merge(m, src)
}
func (m *QueryMakeValidPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMakeValidPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMakeValidPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMakeValidPairRequest proto.InternalMessageInfo

func (m *QueryMakeValidPairRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *QueryMakeValidPairRequest) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

type QueryMakeValidPairResponse struct {
	Coin types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
}

func (m *QueryMakeValidPairResponse) Reset()         { *m = QueryMakeValidPairResponse{} }
func (m *QueryMakeValidPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMakeValidPairResponse) ProtoMessage()    {}
func (*QueryMakeValidPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{15}
}
func (m *QueryMakeValidPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMakeValidPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMakeValidPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMakeValidPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMakeValidPairResponse.Merge(m, src)
}
func (m *QueryMakeValidPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMakeValidPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMakeValidPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMakeValidPairResponse proto.InternalMessageInfo

func (m *QueryMakeValidPairResponse) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

// Estimate pool coins returned by burning LPToken
type QueryEstimatePoolRemoveRequest struct {
	PoolName string `protobuf:"bytes,1,opt,name=poolName,proto3" json:"poolName,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryEstimatePoolRemoveRequest) Reset()         { *m = QueryEstimatePoolRemoveRequest{} }
func (m *QueryEstimatePoolRemoveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimatePoolRemoveRequest) ProtoMessage()    {}
func (*QueryEstimatePoolRemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{16}
}
func (m *QueryEstimatePoolRemoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimatePoolRemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimatePoolRemoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimatePoolRemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimatePoolRemoveRequest.Merge(m, src)
}
func (m *QueryEstimatePoolRemoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimatePoolRemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimatePoolRemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimatePoolRemoveRequest proto.InternalMessageInfo

func (m *QueryEstimatePoolRemoveRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *QueryEstimatePoolRemoveRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QueryEstimatePoolRemoveResponse struct {
	Coins []types.Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins"`
}

func (m *QueryEstimatePoolRemoveResponse) Reset()         { *m = QueryEstimatePoolRemoveResponse{} }
func (m *QueryEstimatePoolRemoveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimatePoolRemoveResponse) ProtoMessage()    {}
func (*QueryEstimatePoolRemoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{17}
}
func (m *QueryEstimatePoolRemoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimatePoolRemoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimatePoolRemoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimatePoolRemoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimatePoolRemoveResponse.Merge(m, src)
}
func (m *QueryEstimatePoolRemoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimatePoolRemoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimatePoolRemoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimatePoolRemoveResponse proto.InternalMessageInfo

func (m *QueryEstimatePoolRemoveResponse) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

type QueryListRecordsFromPoolRequest struct {
	PoolName string `protobuf:"bytes,1,opt,name=poolName,proto3" json:"poolName,omitempty"`
}

func (m *QueryListRecordsFromPoolRequest) Reset()         { *m = QueryListRecordsFromPoolRequest{} }
func (m *QueryListRecordsFromPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsFromPoolRequest) ProtoMessage()    {}
func (*QueryListRecordsFromPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{18}
}
func (m *QueryListRecordsFromPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsFromPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsFromPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsFromPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsFromPoolRequest.Merge(m, src)
}
func (m *QueryListRecordsFromPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsFromPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsFromPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsFromPoolRequest proto.InternalMessageInfo

func (m *QueryListRecordsFromPoolRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

type QueryListRecordsFromPoolResponse struct {
	Records []ProviderRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
}

func (m *QueryListRecordsFromPoolResponse) Reset()         { *m = QueryListRecordsFromPoolResponse{} }
func (m *QueryListRecordsFromPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsFromPoolResponse) ProtoMessage()    {}
func (*QueryListRecordsFromPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c65c7b97e11ceedc, []int{19}
}
func (m *QueryListRecordsFromPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsFromPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsFromPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsFromPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsFromPoolResponse.Merge(m, src)
}
func (m *QueryListRecordsFromPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsFromPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsFromPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsFromPoolResponse proto.InternalMessageInfo

func (m *QueryListRecordsFromPoolResponse) GetRecords() []ProviderRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "canine_chain.amm.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "canine_chain.amm.QueryParamsResponse")
	proto.RegisterType((*QueryGetPoolRequest)(nil), "canine_chain.amm.QueryGetPoolRequest")
	proto.RegisterType((*QueryGetPoolResponse)(nil), "canine_chain.amm.QueryGetPoolResponse")
	proto.RegisterType((*QueryAlPoolRequest)(nil), "canine_chain.amm.QueryAlPoolRequest")
	proto.RegisterType((*QueryAlPoolResponse)(nil), "canine_chain.amm.QueryAlPoolResponse")
	proto.RegisterType((*QueryGetProviderRecordRequest)(nil), "canine_chain.amm.QueryGetProviderRecordRequest")
	proto.RegisterType((*QueryGetProviderRecordResponse)(nil), "canine_chain.amm.QueryGetProviderRecordResponse")
	proto.RegisterType((*QueryEstimateSwapOutRequest)(nil), "canine_chain.amm.QueryEstimateSwapOutRequest")
	proto.RegisterType((*QueryEstimateSwapOutResponse)(nil), "canine_chain.amm.QueryEstimateSwapOutResponse")
	proto.RegisterType((*QueryEstimateSwapInRequest)(nil), "canine_chain.amm.QueryEstimateSwapInRequest")
	proto.RegisterType((*QueryEstimateSwapInResponse)(nil), "canine_chain.amm.QueryEstimateSwapInResponse")
	proto.RegisterType((*QueryEstimateContributionRequest)(nil), "canine_chain.amm.QueryEstimateContributionRequest")
	proto.RegisterType((*QueryEstimateContributionResponse)(nil), "canine_chain.amm.QueryEstimateContributionResponse")
	proto.RegisterType((*QueryMakeValidPairRequest)(nil), "canine_chain.amm.QueryMakeValidPairRequest")
	proto.RegisterType((*QueryMakeValidPairResponse)(nil), "canine_chain.amm.QueryMakeValidPairResponse")
	proto.RegisterType((*QueryEstimatePoolRemoveRequest)(nil), "canine_chain.amm.QueryEstimatePoolRemoveRequest")
	proto.RegisterType((*QueryEstimatePoolRemoveResponse)(nil), "canine_chain.amm.QueryEstimatePoolRemoveResponse")
	proto.RegisterType((*QueryListRecordsFromPoolRequest)(nil), "canine_chain.amm.QueryListRecordsFromPoolRequest")
	proto.RegisterType((*QueryListRecordsFromPoolResponse)(nil), "canine_chain.amm.QueryListRecordsFromPoolResponse")
}

func init() { proto.RegisterFile("canine_chain/amm/query.proto", fileDescriptor_c65c7b97e11ceedc) }

var fileDescriptor_c65c7b97e11ceedc = []byte{
	// 1120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x97, 0x5b, 0x6f, 0x13, 0x47,
	0x1b, 0xc7, 0xb3, 0x90, 0x84, 0x97, 0x07, 0x05, 0x5e, 0x0d, 0x11, 0x82, 0x25, 0x98, 0xb0, 0x40,
	0x5a, 0x1a, 0xb2, 0x9b, 0x83, 0x5a, 0x55, 0xa8, 0x87, 0x1c, 0x44, 0x08, 0x82, 0x14, 0xe3, 0x1e,
	0xa8, 0xa2, 0xaa, 0xd6, 0x78, 0x3d, 0x35, 0xd3, 0xec, 0xee, 0x38, 0xbb, 0xeb, 0x14, 0x14, 0xf9,
	0xa2, 0x5c, 0xf5, 0x12, 0xa9, 0x5f, 0xa3, 0x1f, 0xa0, 0xaa, 0x54, 0xa9, 0x17, 0xbd, 0xe0, 0x12,
	0xa9, 0x52, 0xd5, 0xab, 0xaa, 0x4a, 0xda, 0xef, 0x51, 0xed, 0xcc, 0xb3, 0xf6, 0x8e, 0xbd, 0xb6,
	0x37, 0xea, 0x9d, 0x77, 0xe7, 0x39, 0xfc, 0xfe, 0xcf, 0x8c, 0xe7, 0x6f, 0xc3, 0x8c, 0x4b, 0x03,
	0x1e, 0xb0, 0xaa, 0xfb, 0x94, 0xf2, 0xc0, 0xa1, 0xbe, 0xef, 0xec, 0xb5, 0x58, 0xf8, 0xdc, 0x6e,
	0x86, 0x22, 0x16, 0xe4, 0xff, 0xd9, 0x55, 0x9b, 0xfa, 0xbe, 0x39, 0xdd, 0x10, 0x0d, 0x21, 0x17,
	0x9d, 0xe4, 0x93, 0x8a, 0x33, 0x67, 0x1a, 0x42, 0x34, 0x3c, 0xe6, 0xd0, 0x26, 0x77, 0x68, 0x10,
	0x88, 0x98, 0xc6, 0x5c, 0x04, 0x11, 0xae, 0x96, 0x5c, 0x11, 0xf9, 0x22, 0x72, 0x6a, 0x34, 0x62,
	0xce, 0xfe, 0x52, 0x8d, 0xc5, 0x74, 0xc9, 0x71, 0x05, 0x0f, 0x70, 0xfd, 0xad, 0xec, 0xba, 0x6c,
	0xdf, 0x89, 0x6a, 0xd2, 0x06, 0x0f, 0x64, 0x31, 0x8c, 0xbd, 0xd2, 0xc7, 0xdb, 0xa4, 0x21, 0xf5,
	0xd3, 0x56, 0x97, 0xfb, 0x97, 0x85, 0xf0, 0x70, 0x71, 0xae, 0x7f, 0x31, 0x14, 0xfb, 0xbc, 0xce,
	0xc2, 0x6a, 0xc8, 0x5c, 0x11, 0xd6, 0x55, 0x9c, 0x35, 0x0d, 0xe4, 0x71, 0x42, 0x51, 0x96, 0x95,
	0x2b, 0x6c, 0xaf, 0xc5, 0xa2, 0xd8, 0xda, 0x86, 0xf3, 0xda, 0xdb, 0xa8, 0x29, 0x82, 0x88, 0x91,
	0x77, 0x60, 0x52, 0x11, 0x5c, 0x34, 0x66, 0x8d, 0x37, 0xcf, 0x2c, 0x5f, 0xb4, 0x7b, 0x67, 0x66,
	0xab, 0x8c, 0xf5, 0xf1, 0x57, 0x7f, 0x5e, 0x1d, 0xab, 0x60, 0xb4, 0x35, 0x8f, 0xe5, 0xee, 0xb1,
	0xb8, 0x2c, 0x84, 0x87, 0x5d, 0xc8, 0x34, 0x4c, 0xf0, 0xa0, 0xce, 0x9e, 0xc9, 0x6a, 0xa7, 0x2b,
	0xea, 0xc1, 0xda, 0x82, 0x69, 0x3d, 0x18, 0x9b, 0x2f, 0xc2, 0x78, 0xf2, 0x8c, 0xad, 0x2f, 0xe4,
	0xb4, 0x16, 0xc2, 0xc3, 0xc6, 0x32, 0xd2, 0xfa, 0x02, 0xb5, 0xad, 0x79, 0xd9, 0xae, 0x9b, 0x00,
	0xdd, 0x49, 0x63, 0xb5, 0x39, 0x5b, 0x6d, 0x8b, 0x9d, 0x6c, 0x8b, 0xad, 0x4e, 0x05, 0x6e, 0x8b,
	0x5d, 0xa6, 0x0d, 0x86, 0xb9, 0x95, 0x4c, 0xa6, 0xf5, 0xd2, 0x40, 0x55, 0x69, 0xf9, 0x3e, 0xce,
	0x93, 0xc5, 0x38, 0xc9, 0x3d, 0x8d, 0xe8, 0x84, 0x24, 0x7a, 0x63, 0x24, 0x91, 0x6a, 0xa7, 0x21,
	0x3d, 0x81, 0x2b, 0x9d, 0xd1, 0xe1, 0x6e, 0x57, 0xe4, 0x66, 0xa7, 0xda, 0x4d, 0xf8, 0x5f, 0x7a,
	0x0c, 0x70, 0xe8, 0x9d, 0x67, 0xb9, 0x26, 0x84, 0xf7, 0x11, 0xf5, 0x99, 0x64, 0x48, 0xd6, 0xf0,
	0xd9, 0x0a, 0xa1, 0x34, 0xa8, 0x30, 0xaa, 0x2e, 0xc3, 0x39, 0x4f, 0x5f, 0xc2, 0xd1, 0xce, 0xe6,
	0x0c, 0x40, 0x8b, 0xc3, 0x51, 0xf4, 0xa6, 0x5b, 0x4f, 0xe0, 0xb2, 0xec, 0x79, 0x37, 0x8a, 0xb9,
	0x4f, 0x63, 0xf6, 0xf1, 0x37, 0xb4, 0xf9, 0xa8, 0x15, 0x67, 0xa5, 0xa4, 0xb8, 0x86, 0x8e, 0x4b,
	0x66, 0xe0, 0x34, 0x0f, 0x9a, 0xad, 0x78, 0x43, 0xf0, 0x00, 0xb5, 0x74, 0x5f, 0x58, 0x55, 0x98,
	0xc9, 0x2f, 0x8c, 0x52, 0x3e, 0x04, 0x10, 0xad, 0x38, 0x4d, 0x57, 0x2a, 0x2e, 0x69, 0xdb, 0x91,
	0x6e, 0x44, 0x12, 0x80, 0xf8, 0x99, 0x14, 0x6b, 0x07, 0xcc, 0xbe, 0x06, 0xf7, 0x83, 0x22, 0xe0,
	0xb3, 0x70, 0xa6, 0x5b, 0x27, 0x42, 0xf4, 0xec, 0x2b, 0xeb, 0xcb, 0x9c, 0xa9, 0x24, 0xb5, 0xbb,
	0xec, 0x1d, 0xa1, 0x51, 0x61, 0xf6, 0x6e, 0x8a, 0x55, 0x87, 0x59, 0xad, 0xfe, 0x86, 0x08, 0xe2,
	0x90, 0xd7, 0x5a, 0xc9, 0xf9, 0x2a, 0xa2, 0xe0, 0x06, 0x4c, 0xd5, 0x59, 0xc4, 0x43, 0x56, 0x5f,
	0xf3, 0x45, 0x2b, 0x88, 0x51, 0x83, 0xfe, 0xd2, 0xda, 0x81, 0x6b, 0x43, 0xba, 0xa0, 0x96, 0xb7,
	0x61, 0xc2, 0x45, 0x19, 0x27, 0x8b, 0xc8, 0x50, 0xd1, 0xd6, 0x03, 0xb8, 0x24, 0x6b, 0x6f, 0xd3,
	0x5d, 0xf6, 0x19, 0xf5, 0x78, 0xbd, 0x4c, 0x79, 0x58, 0x04, 0x9d, 0xc0, 0xb8, 0xdb, 0x3d, 0x30,
	0xf2, 0xb3, 0xf5, 0x18, 0xb7, 0xb2, 0xa7, 0x18, 0x12, 0xae, 0x60, 0x46, 0xc1, 0x39, 0xab, 0x92,
	0x9f, 0xe0, 0x77, 0x29, 0xd5, 0xae, 0x2e, 0x0f, 0x5f, 0xec, 0xb3, 0x22, 0x90, 0x17, 0x60, 0x92,
	0x66, 0x07, 0x8b, 0x4f, 0xd6, 0xe7, 0x70, 0x75, 0x60, 0xd5, 0xff, 0x36, 0xcf, 0xf7, 0xb1, 0xf2,
	0x43, 0x1e, 0xc5, 0xea, 0xab, 0x19, 0x6d, 0x86, 0xc2, 0xcf, 0x5e, 0xa9, 0x43, 0x80, 0x3b, 0x07,
	0x2a, 0x37, 0x1d, 0xc9, 0x56, 0xe1, 0x94, 0x32, 0xa5, 0x94, 0xad, 0xe8, 0xa5, 0x91, 0xa6, 0x2d,
	0xff, 0x33, 0x05, 0x13, 0xb2, 0x0d, 0x79, 0x61, 0xc0, 0xa4, 0x32, 0x21, 0x72, 0xa3, 0xbf, 0x4a,
	0xbf, 0xd7, 0x99, 0x37, 0x47, 0x44, 0x29, 0x46, 0x6b, 0xfe, 0xc5, 0x6f, 0x7f, 0x7f, 0x7f, 0xe2,
	0x26, 0xb9, 0xee, 0x7c, 0x4d, 0xdd, 0x5d, 0xea, 0x2d, 0xd4, 0xa9, 0x70, 0x54, 0xe6, 0x42, 0xaf,
	0x41, 0x93, 0xef, 0x0c, 0x65, 0x02, 0x64, 0x50, 0x71, 0xdd, 0x09, 0xcd, 0xb9, 0x51, 0x61, 0x08,
	0xb1, 0x24, 0x21, 0xe6, 0xc9, 0xad, 0xe1, 0x10, 0x42, 0x78, 0xce, 0x81, 0x74, 0xd3, 0x36, 0xf9,
	0xd6, 0x80, 0x53, 0x49, 0x8d, 0x35, 0xcf, 0x1b, 0x38, 0x10, 0xcd, 0x20, 0x07, 0x0e, 0x44, 0xf7,
	0x39, 0xeb, 0x96, 0x64, 0xb9, 0x4e, 0xae, 0x8d, 0x64, 0x21, 0xbf, 0x18, 0x70, 0x56, 0xdf, 0x3f,
	0xe2, 0x0c, 0x51, 0x9c, 0x67, 0x5d, 0xe6, 0x62, 0xf1, 0x04, 0x04, 0x7c, 0x20, 0x01, 0xef, 0x92,
	0x8d, 0xa1, 0x80, 0x1e, 0xdf, 0xab, 0x66, 0x7f, 0x1a, 0x39, 0x07, 0xe9, 0xd1, 0x6d, 0x3b, 0x07,
	0xe9, 0x42, 0x9b, 0xfc, 0x64, 0xc0, 0xb9, 0x1e, 0xc3, 0x20, 0x0b, 0x03, 0x90, 0xf2, 0x1d, 0xcb,
	0xb4, 0x8b, 0x86, 0x23, 0xff, 0x96, 0xe4, 0x5f, 0x27, 0xab, 0x43, 0xf9, 0x19, 0x66, 0x57, 0x45,
	0x2b, 0xd6, 0xd8, 0x3b, 0x97, 0x7a, 0x9b, 0xfc, 0x68, 0xc0, 0x59, 0xdd, 0x30, 0xc8, 0xed, 0x02,
	0x30, 0x1d, 0xcf, 0x32, 0x17, 0x0a, 0x46, 0x23, 0xf9, 0x7d, 0x49, 0xbe, 0x41, 0xd6, 0x8a, 0x91,
	0xf3, 0x40, 0x03, 0xcf, 0xd8, 0x5d, 0x9b, 0xfc, 0x6e, 0xc0, 0x74, 0x9e, 0x4b, 0x90, 0xe5, 0x11,
	0x48, 0x39, 0xc6, 0x65, 0xae, 0x1c, 0x2b, 0x07, 0xc5, 0x7c, 0x2a, 0xc5, 0x3c, 0x22, 0xdb, 0xc5,
	0xc4, 0xb8, 0x99, 0x1a, 0x9a, 0x2c, 0xcd, 0x01, 0xdb, 0xe4, 0x07, 0x03, 0xa6, 0x34, 0x57, 0x21,
	0xf3, 0x03, 0xe8, 0xf2, 0x8c, 0xcc, 0xbc, 0x5d, 0x2c, 0x18, 0x35, 0xac, 0x4a, 0x0d, 0x77, 0xc8,
	0xbb, 0x43, 0x35, 0xf8, 0x74, 0x97, 0x55, 0x9b, 0x94, 0x87, 0x1a, 0xb7, 0x2b, 0x8f, 0xd0, 0xcf,
	0x06, 0x90, 0x7e, 0x6f, 0x21, 0x8b, 0x23, 0x26, 0xda, 0x67, 0x6e, 0xe6, 0xd2, 0x31, 0x32, 0x90,
	0x7e, 0x5d, 0xd2, 0xbf, 0x47, 0xee, 0x14, 0xdb, 0x81, 0x84, 0xbd, 0x1a, 0xca, 0x12, 0xce, 0x01,
	0xc5, 0x71, 0xff, 0x6a, 0xc0, 0xf9, 0x1c, 0x0b, 0x22, 0x83, 0x70, 0x06, 0xbb, 0x9d, 0xb9, 0x7c,
	0x9c, 0x14, 0x94, 0xb0, 0x29, 0x25, 0xac, 0x92, 0x0f, 0x46, 0xdc, 0x45, 0x51, 0x8c, 0x7f, 0xcf,
	0xa2, 0xea, 0x57, 0xa1, 0xf0, 0xab, 0xea, 0x2a, 0xef, 0xec, 0xc6, 0xfa, 0xd6, 0xab, 0xc3, 0x92,
	0xf1, 0xfa, 0xb0, 0x64, 0xfc, 0x75, 0x58, 0x32, 0x5e, 0x1e, 0x95, 0xc6, 0x5e, 0x1f, 0x95, 0xc6,
	0xfe, 0x38, 0x2a, 0x8d, 0xed, 0xd8, 0x0d, 0x1e, 0x3f, 0x6d, 0xd5, 0x6c, 0x57, 0xf8, 0xd8, 0xe3,
	0x21, 0xad, 0x45, 0x7a, 0x8f, 0x67, 0xb2, 0x4b, 0xfc, 0xbc, 0xc9, 0xa2, 0xda, 0xa4, 0xfc, 0xff,
	0xb7, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xd1, 0x1e, 0x02, 0x15, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Pool by index.
	Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error)
	// Queries a list of Pool items.
	PoolAll(ctx context.Context, in *QueryAlPoolRequest, opts ...grpc.CallOption) (*QueryAlPoolResponse, error)
	// Queries a ProviderRecord by pool name and provider address.
	ProviderRecord(ctx context.Context, in *QueryGetProviderRecordRequest, opts ...grpc.CallOption) (*QueryGetProviderRecordResponse, error)
	// Estimate coin output from a swap.
	EstimateSwapOut(ctx context.Context, in *QueryEstimateSwapOutRequest, opts ...grpc.CallOption) (*QueryEstimateSwapOutResponse, error)
	// Estimate coin input to get desired coin output from a swap.
	EstimateSwapIn(ctx context.Context, in *QueryEstimateSwapInRequest, opts ...grpc.CallOption) (*QueryEstimateSwapInResponse, error)
	// Estimate coin inputs to get desired amount of LPToken.
	EstimateContribution(ctx context.Context, in *QueryEstimateContributionRequest, opts ...grpc.CallOption) (*QueryEstimateContributionResponse, error)
	// Query coins to deposit to make valid liquidity pair.
	// Input one coin and get other coins to deposit to make liquidity pair.
	MakeValidPair(ctx context.Context, in *QueryMakeValidPairRequest, opts ...grpc.CallOption) (*QueryMakeValidPairResponse, error)
	// Estimate amount of coins returned by burning a pool token.
	EstimatePoolRemove(ctx context.Context, in *QueryEstimatePoolRemoveRequest, opts ...grpc.CallOption) (*QueryEstimatePoolRemoveResponse, error)
	// Queries a list of ListRecordsFromPool items.
	ListRecordsFromPool(ctx context.Context, in *QueryListRecordsFromPoolRequest, opts ...grpc.CallOption) (*QueryListRecordsFromPoolResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error) {
	out := new(QueryGetPoolResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolAll(ctx context.Context, in *QueryAlPoolRequest, opts ...grpc.CallOption) (*QueryAlPoolResponse, error) {
	out := new(QueryAlPoolResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/PoolAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderRecord(ctx context.Context, in *QueryGetProviderRecordRequest, opts ...grpc.CallOption) (*QueryGetProviderRecordResponse, error) {
	out := new(QueryGetProviderRecordResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/ProviderRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSwapOut(ctx context.Context, in *QueryEstimateSwapOutRequest, opts ...grpc.CallOption) (*QueryEstimateSwapOutResponse, error) {
	out := new(QueryEstimateSwapOutResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/EstimateSwapOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSwapIn(ctx context.Context, in *QueryEstimateSwapInRequest, opts ...grpc.CallOption) (*QueryEstimateSwapInResponse, error) {
	out := new(QueryEstimateSwapInResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/EstimateSwapIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateContribution(ctx context.Context, in *QueryEstimateContributionRequest, opts ...grpc.CallOption) (*QueryEstimateContributionResponse, error) {
	out := new(QueryEstimateContributionResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/EstimateContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MakeValidPair(ctx context.Context, in *QueryMakeValidPairRequest, opts ...grpc.CallOption) (*QueryMakeValidPairResponse, error) {
	out := new(QueryMakeValidPairResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/MakeValidPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimatePoolRemove(ctx context.Context, in *QueryEstimatePoolRemoveRequest, opts ...grpc.CallOption) (*QueryEstimatePoolRemoveResponse, error) {
	out := new(QueryEstimatePoolRemoveResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/EstimatePoolRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRecordsFromPool(ctx context.Context, in *QueryListRecordsFromPoolRequest, opts ...grpc.CallOption) (*QueryListRecordsFromPoolResponse, error) {
	out := new(QueryListRecordsFromPoolResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.amm.Query/ListRecordsFromPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Pool by index.
	Pool(context.Context, *QueryGetPoolRequest) (*QueryGetPoolResponse, error)
	// Queries a list of Pool items.
	PoolAll(context.Context, *QueryAlPoolRequest) (*QueryAlPoolResponse, error)
	// Queries a ProviderRecord by pool name and provider address.
	ProviderRecord(context.Context, *QueryGetProviderRecordRequest) (*QueryGetProviderRecordResponse, error)
	// Estimate coin output from a swap.
	EstimateSwapOut(context.Context, *QueryEstimateSwapOutRequest) (*QueryEstimateSwapOutResponse, error)
	// Estimate coin input to get desired coin output from a swap.
	EstimateSwapIn(context.Context, *QueryEstimateSwapInRequest) (*QueryEstimateSwapInResponse, error)
	// Estimate coin inputs to get desired amount of LPToken.
	EstimateContribution(context.Context, *QueryEstimateContributionRequest) (*QueryEstimateContributionResponse, error)
	// Query coins to deposit to make valid liquidity pair.
	// Input one coin and get other coins to deposit to make liquidity pair.
	MakeValidPair(context.Context, *QueryMakeValidPairRequest) (*QueryMakeValidPairResponse, error)
	// Estimate amount of coins returned by burning a pool token.
	EstimatePoolRemove(context.Context, *QueryEstimatePoolRemoveRequest) (*QueryEstimatePoolRemoveResponse, error)
	// Queries a list of ListRecordsFromPool items.
	ListRecordsFromPool(context.Context, *QueryListRecordsFromPoolRequest) (*QueryListRecordsFromPoolResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryGetPoolRequest) (*QueryGetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) PoolAll(ctx context.Context, req *QueryAlPoolRequest) (*QueryAlPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolAll not implemented")
}
func (*UnimplementedQueryServer) ProviderRecord(ctx context.Context, req *QueryGetProviderRecordRequest) (*QueryGetProviderRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderRecord not implemented")
}
func (*UnimplementedQueryServer) EstimateSwapOut(ctx context.Context, req *QueryEstimateSwapOutRequest) (*QueryEstimateSwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSwapOut not implemented")
}
func (*UnimplementedQueryServer) EstimateSwapIn(ctx context.Context, req *QueryEstimateSwapInRequest) (*QueryEstimateSwapInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSwapIn not implemented")
}
func (*UnimplementedQueryServer) EstimateContribution(ctx context.Context, req *QueryEstimateContributionRequest) (*QueryEstimateContributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateContribution not implemented")
}
func (*UnimplementedQueryServer) MakeValidPair(ctx context.Context, req *QueryMakeValidPairRequest) (*QueryMakeValidPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeValidPair not implemented")
}
func (*UnimplementedQueryServer) EstimatePoolRemove(ctx context.Context, req *QueryEstimatePoolRemoveRequest) (*QueryEstimatePoolRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatePoolRemove not implemented")
}
func (*UnimplementedQueryServer) ListRecordsFromPool(ctx context.Context, req *QueryListRecordsFromPoolRequest) (*QueryListRecordsFromPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecordsFromPool not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryGetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAlPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/PoolAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolAll(ctx, req.(*QueryAlPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProviderRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/ProviderRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderRecord(ctx, req.(*QueryGetProviderRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateSwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/EstimateSwapOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSwapOut(ctx, req.(*QueryEstimateSwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSwapIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateSwapInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSwapIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/EstimateSwapIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSwapIn(ctx, req.(*QueryEstimateSwapInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/EstimateContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateContribution(ctx, req.(*QueryEstimateContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MakeValidPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMakeValidPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MakeValidPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/MakeValidPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MakeValidPair(ctx, req.(*QueryMakeValidPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimatePoolRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimatePoolRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimatePoolRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/EstimatePoolRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimatePoolRemove(ctx, req.(*QueryEstimatePoolRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRecordsFromPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListRecordsFromPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRecordsFromPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.amm.Query/ListRecordsFromPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRecordsFromPool(ctx, req.(*QueryListRecordsFromPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canine_chain.amm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "PoolAll",
			Handler:    _Query_PoolAll_Handler,
		},
		{
			MethodName: "ProviderRecord",
			Handler:    _Query_ProviderRecord_Handler,
		},
		{
			MethodName: "EstimateSwapOut",
			Handler:    _Query_EstimateSwapOut_Handler,
		},
		{
			MethodName: "EstimateSwapIn",
			Handler:    _Query_EstimateSwapIn_Handler,
		},
		{
			MethodName: "EstimateContribution",
			Handler:    _Query_EstimateContribution_Handler,
		},
		{
			MethodName: "MakeValidPair",
			Handler:    _Query_MakeValidPair_Handler,
		},
		{
			MethodName: "EstimatePoolRemove",
			Handler:    _Query_EstimatePoolRemove_Handler,
		},
		{
			MethodName: "ListRecordsFromPool",
			Handler:    _Query_ListRecordsFromPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canine_chain/amm/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAlPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAlPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAlPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAlPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAlPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAlPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pool) > 0 {
		for iNdEx := len(m.Pool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProviderRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProviderRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProviderRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProviderRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProviderRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProviderRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LProviderRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateSwapOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateSwapOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateSwapOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InputCoin) > 0 {
		i -= len(m.InputCoin)
		copy(dAtA[i:], m.InputCoin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InputCoin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateSwapOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateSwapOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateSwapOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutputCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateSwapInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateSwapInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateSwapInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputCoins) > 0 {
		i -= len(m.OutputCoins)
		copy(dAtA[i:], m.OutputCoins)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OutputCoins)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateSwapInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateSwapInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateSwapInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InputCoins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateContributionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateContributionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateContributionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DesiredAmount) > 0 {
		i -= len(m.DesiredAmount)
		copy(dAtA[i:], m.DesiredAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DesiredAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateContributionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateContributionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateContributionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMakeValidPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMakeValidPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMakeValidPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMakeValidPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMakeValidPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMakeValidPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimatePoolRemoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimatePoolRemoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimatePoolRemoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimatePoolRemoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimatePoolRemoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimatePoolRemoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsFromPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsFromPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsFromPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsFromPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsFromPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsFromPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAlPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAlPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pool) > 0 {
		for _, e := range m.Pool {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProviderRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProviderRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LProviderRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateSwapOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.InputCoin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateSwapOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutputCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateSwapInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OutputCoins)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateSwapInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InputCoins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateContributionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DesiredAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateContributionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMakeValidPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMakeValidPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimatePoolRemoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimatePoolRemoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryListRecordsFromPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRecordsFromPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAlPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAlPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAlPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAlPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAlPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAlPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = append(m.Pool, Pool{})
			if err := m.Pool[len(m.Pool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProviderRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProviderRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProviderRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProviderRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProviderRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProviderRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LProviderRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LProviderRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateSwapOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateSwapOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateSwapOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateSwapOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateSwapOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateSwapOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutputCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateSwapInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateSwapInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateSwapInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCoins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputCoins = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateSwapInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateSwapInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateSwapInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InputCoins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateContributionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateContributionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateContributionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateContributionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateContributionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateContributionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMakeValidPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMakeValidPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMakeValidPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMakeValidPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMakeValidPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMakeValidPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimatePoolRemoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimatePoolRemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimatePoolRemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimatePoolRemoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimatePoolRemoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimatePoolRemoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsFromPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecordsFromPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecordsFromPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsFromPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecordsFromPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecordsFromPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, ProviderRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
