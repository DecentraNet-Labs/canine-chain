// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/amm/provider_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LiqProviderRec is a record of a liquidity provider's contribution to a pool.
// It is used to enforce withdraw panelty and calculate rewards collected.
// This record is created only once when provider contributes to a pool and
// only updated after witdrawal or deposit.
// It is deleted when the provider burns all of their shares.
// This is stored at KVStore with
// 	{ProviderRecordKeyPrefix}{poolName}{provider} key.
type ProviderRecord struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	PoolId   uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Burning LP token is locked for certain duration the after provider
	// deposits to the pool. Unlock time is updated every succeeding deposits.
	// The provider can burn their pool token during lock time but has to take
	// certain amount of panelty.
	// Unlock time is blocktime + lockDuration at time of deposit.
	UnlockTime   string `protobuf:"bytes,3,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
	LockDuration string `protobuf:"bytes,4,opt,name=lock_duration,json=lockDuration,proto3" json:"lock_duration,omitempty"`
}

func (m *ProviderRecord) Reset()         { *m = ProviderRecord{} }
func (m *ProviderRecord) String() string { return proto.CompactTextString(m) }
func (*ProviderRecord) ProtoMessage()    {}
func (*ProviderRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cd20825f1902325, []int{0}
}
func (m *ProviderRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderRecord.Merge(m, src)
}
func (m *ProviderRecord) XXX_Size() int {
	return m.Size()
}
func (m *ProviderRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderRecord proto.InternalMessageInfo

func (m *ProviderRecord) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderRecord) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *ProviderRecord) GetUnlockTime() string {
	if m != nil {
		return m.UnlockTime
	}
	return ""
}

func (m *ProviderRecord) GetLockDuration() string {
	if m != nil {
		return m.LockDuration
	}
	return ""
}

func init() {
	proto.RegisterType((*ProviderRecord)(nil), "canine_chain.amm.ProviderRecord")
}

func init() {
	proto.RegisterFile("canine_chain/amm/provider_record.proto", fileDescriptor_0cd20825f1902325)
}

var fileDescriptor_0cd20825f1902325 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0x4e, 0xcc, 0xcb,
	0xcc, 0x4b, 0x8d, 0x4f, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0xcc, 0xcd, 0xd5, 0x2f, 0x28, 0xca,
	0x2f, 0xcb, 0x4c, 0x49, 0x2d, 0x8a, 0x2f, 0x4a, 0x4d, 0xce, 0x2f, 0x4a, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x40, 0x56, 0xa7, 0x97, 0x98, 0x9b, 0xab, 0xd4, 0xcd, 0xc8, 0xc5, 0x17,
	0x00, 0x55, 0x1b, 0x04, 0x56, 0x2a, 0x24, 0xc5, 0xc5, 0x01, 0xd3, 0x2d, 0xc1, 0xa8, 0xc0, 0xa8,
	0xc1, 0x19, 0x04, 0xe7, 0x0b, 0x89, 0x73, 0xb1, 0x17, 0xe4, 0xe7, 0xe7, 0xc4, 0x67, 0xa6, 0x48,
	0x30, 0x29, 0x30, 0x6a, 0xb0, 0x04, 0xb1, 0x81, 0xb8, 0x9e, 0x29, 0x42, 0xf2, 0x5c, 0xdc, 0xa5,
	0x79, 0x39, 0xf9, 0xc9, 0xd9, 0xf1, 0x25, 0x99, 0xb9, 0xa9, 0x12, 0xcc, 0x60, 0x7d, 0x5c, 0x10,
	0xa1, 0x90, 0xcc, 0xdc, 0x54, 0x21, 0x65, 0x2e, 0x5e, 0xb0, 0x74, 0x4a, 0x69, 0x51, 0x62, 0x49,
	0x66, 0x7e, 0x9e, 0x04, 0x0b, 0x58, 0x09, 0x0f, 0x48, 0xd0, 0x05, 0x2a, 0xe6, 0xe4, 0x71, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70,
	0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x7a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49,
	0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x59, 0x89, 0xc9, 0xd9, 0x89, 0x39, 0x3e, 0x89, 0x49, 0xc5, 0xfa,
	0x10, 0xff, 0xe8, 0x42, 0xfc, 0x5d, 0x01, 0xf6, 0x79, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b,
	0xd8, 0xc3, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x20, 0x5e, 0x1d, 0x1a, 0x01, 0x00,
	0x00,
}

func (m *ProviderRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockDuration) > 0 {
		i -= len(m.LockDuration)
		copy(dAtA[i:], m.LockDuration)
		i = encodeVarintProviderRecord(dAtA, i, uint64(len(m.LockDuration)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UnlockTime) > 0 {
		i -= len(m.UnlockTime)
		copy(dAtA[i:], m.UnlockTime)
		i = encodeVarintProviderRecord(dAtA, i, uint64(len(m.UnlockTime)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintProviderRecord(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintProviderRecord(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProviderRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovProviderRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProviderRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovProviderRecord(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovProviderRecord(uint64(m.PoolId))
	}
	l = len(m.UnlockTime)
	if l > 0 {
		n += 1 + l + sovProviderRecord(uint64(l))
	}
	l = len(m.LockDuration)
	if l > 0 {
		n += 1 + l + sovProviderRecord(uint64(l))
	}
	return n
}

func sovProviderRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProviderRecord(x uint64) (n int) {
	return sovProviderRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProviderRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProviderRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviderRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviderRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviderRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviderRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviderRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviderRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviderRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviderRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviderRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviderRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockDuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProviderRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProviderRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProviderRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProviderRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProviderRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProviderRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProviderRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProviderRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProviderRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProviderRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProviderRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProviderRecord = fmt.Errorf("proto: unexpected end of group")
)
